# OnlySaid GitLab CI/CD Pipeline
# Hybrid approach: GitLab Container Registry + JFrog for large artifacts

# Global variables
variables:
  # Build versioning
  BUILD_VERSION: $CI_COMMIT_SHA
  BUILD_NUMBER: $CI_PIPELINE_IID
  
  # Use GitLab Container Registry for Docker images
  DOCKER_REGISTRY: $CI_REGISTRY
  DOCKER_IMAGE_PREFIX: $CI_REGISTRY_IMAGE
  
  # JFrog for Electron installers only
  JFROG_HTTP_URL: "http://1bucket.oneas1a.com:8080"
  ELECTRON_REGISTRY: "oa-onlysaid-electron-dev-local"
  
  # Pipeline settings
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: "fast"
  
  # Enable Git submodules
  GIT_SUBMODULE_STRATEGY: recursive

# Stages definition
stages:
  - setup
  - test
  - build
  - package
  - publish
  - deploy
  - cleanup

# Default settings
default:
  # Use Node.js 22 on Debian 12 Bookworm (has GCC 12 with C++20 support)
  image: node:22-bookworm
  tags:
    - onlysaid-runner
  
  # Install additional tools needed across jobs
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq curl wget jq git build-essential
  
  # Retry configuration
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Cache configuration
cache:
  - key: 
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull-push
  - key:
      files:
        - onlysaid-electron/package-lock.json
    paths:
      - onlysaid-electron/node_modules/
    policy: pull-push

# Job Templates
.load_secrets: &load_secrets
  - |
    echo "üîß Using GitLab CI/CD variables..."
    echo "‚úÖ Configuration loaded successfully"
    echo "Docker Registry: ${DOCKER_REGISTRY}"
    echo "JFrog HTTP URL: ${JFROG_HTTP_URL}"
    echo "Electron Registry: ${ELECTRON_REGISTRY}"

.verify_environment: &verify_environment
  - |
    echo "üîç Verifying environment..."
    echo "Container OS: $(cat /etc/os-release | grep PRETTY_NAME)"
    echo "Current user: $(whoami)"
    echo "Working directory: $(pwd)"
    echo "Available disk space:"
    df -h
    echo "Node.js version:"
    node --version
    echo "npm version:"
    npm --version
    echo "Git version:"
    git --version
    echo "‚úÖ Environment verification completed"

.verify_docker_environment: &verify_docker_environment
  - |
    echo "üîç Verifying Docker environment..."
    echo "Container OS: $(cat /etc/os-release | grep PRETTY_NAME)"
    echo "Current user: $(whoami)"
    echo "Working directory: $(pwd)"
    echo "Available disk space:"
    df -h
    echo "Docker version:"
    docker --version
    echo "Docker info:"
    docker info
    echo "‚úÖ Docker environment verification completed"

# Jobs
setup:verify-environment:
  stage: setup
  script:
    - *load_secrets
    - *verify_environment
    - |
      echo "üîó Testing GitLab Container Registry connectivity..."
      echo "GitLab Registry: ${CI_REGISTRY}"
      echo "‚úÖ GitLab Container Registry will be used for Docker images"
      
      echo "üîó Testing JFrog connectivity for Electron installers..."
      WEB_URL="${JFROG_URL%/}/artifactory/api/system/ping"
      echo "Testing JFrog web interface: ${WEB_URL}"
      
      if curl -f -s -k --connect-timeout 10 --max-time 30 "${WEB_URL}" > /dev/null; then
        echo "‚úÖ JFrog web interface is accessible"
      else
        echo "‚ùå Cannot reach JFrog web interface"
        echo "JFrog URL: ${JFROG_URL}"
        exit 1
      fi
  timeout: 5 minutes

install:nextjs-dependencies:
  stage: setup
  needs: ["setup:verify-environment"]
  script:
    - *load_secrets
    - |
      echo "Installing Next.js dependencies..."
      npm config set fetch-timeout 60000
      npm config set fetch-retry-mintimeout 10000
      npm config set fetch-retry-maxtimeout 60000
      npm config set fetch-retries 3
      
      echo "Installing dependencies with npm ci..."
      npm ci --prefer-offline --no-audit
      echo "‚úÖ Successfully installed Next.js dependencies"
  timeout: 15 minutes
  cache:
    - key: 
        files:
          - package-lock.json
      paths:
        - node_modules/
      policy: push

install:electron-dependencies:
  stage: setup
  needs: ["setup:verify-environment"]
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq curl wget jq git
    - git submodule update --init --recursive
  script:
    - *load_secrets
    - |
      cd onlysaid-electron
      
      echo "Installing Electron dependencies..."
      npm config set fetch-timeout 60000
      npm config set fetch-retry-mintimeout 10000
      npm config set fetch-retry-maxtimeout 60000
      npm config set fetch-retries 3
      
      echo "Testing npm registry connectivity for Electron..."
      timeout 30s npm ping
      
      echo "Installing Electron dependencies with npm ci..."
      npm ci --prefer-offline --no-audit
      echo "‚úÖ Successfully installed Electron dependencies"
  timeout: 15 minutes
  cache:
    - key:
        files:
          - onlysaid-electron/package-lock.json
      paths:
        - onlysaid-electron/node_modules/
      policy: push

test:lint-nextjs:
  stage: test
  needs: ["install:nextjs-dependencies"]
  script:
    - *load_secrets
    - |
      echo "Running Next.js ESLint..."
      npm run lint
      echo "‚úÖ Next.js ESLint passed"
  cache:
    - key: 
        files:
          - package-lock.json
      paths:
        - node_modules/
      policy: pull

test:nextjs:
  stage: test
  needs: ["install:nextjs-dependencies"]
  script:
    - *load_secrets
    - |
      echo "Running Next.js tests..."
      # npm test
      echo "‚úÖ Next.js tests completed (no tests configured yet)"
  cache:
    - key: 
        files:
          - package-lock.json
      paths:
        - node_modules/
      policy: pull

test:electron:
  stage: test
  needs: ["install:electron-dependencies"]
  script:
    - *load_secrets
    - |
      echo "Skipping Electron tests - will be run during package build"
      echo "‚úÖ Electron tests will be handled by package script"

build:nextjs:
  stage: build
  needs: ["test:lint-nextjs", "test:nextjs"]
  script:
    - *load_secrets
    - |
      echo "Building Next.js..."
      npm run build
      echo "‚úÖ Next.js application built successfully"
  variables:
    NODE_ENV: production
  cache:
    - key: 
        files:
          - package-lock.json
      paths:
        - node_modules/
      policy: pull

# Modified: Build and immediately publish Electron to JFrog (no GitLab artifacts)
package-and-publish:electron:
  stage: package
  needs: ["test:electron"]
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq curl wget jq git
    - git submodule update --init --recursive
  script:
    - *load_secrets
    - |
      echo "Current working directory: $(pwd)"
      echo "Repository contents:"
      ls -la
      echo "Verifying onlysaid-electron directory exists:"
      if [ ! -d "onlysaid-electron" ]; then
        echo "‚ùå onlysaid-electron directory not found"
        exit 1
      fi
      echo "‚úÖ onlysaid-electron directory found"
    - |
      cd onlysaid-electron
      echo "Building Electron application..."
      echo "Current working directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      
      echo "Checking if package.json exists:"
      if [ -f "package.json" ]; then
        echo "‚úÖ package.json found"
      else
        echo "‚ùå package.json not found"
        exit 1
      fi
      
      echo "Checking node_modules:"
      if [ -d "node_modules" ]; then
        echo "‚úÖ node_modules directory exists"
      else
        echo "‚ùå node_modules directory missing"
        echo "Re-running npm install..."
        npm install
      fi
      
      echo "Building Electron application..."
      npm run package
      echo "‚úÖ Electron build completed successfully"
      
      echo "Listing built files:"
      ls -la release/build/
    - |
      echo "üì§ Uploading Electron installers directly to JFrog..."
      
      cd release/build
      
      echo "JFrog HTTP URL: ${JFROG_HTTP_URL}"
      echo "Target registry: $ELECTRON_REGISTRY"
      echo "Build version: $BUILD_VERSION"
      
      # Verify that build artifacts exist
      if [ ! "$(ls -A .)" ]; then
        echo "‚ùå No Electron build artifacts found"
        exit 1
      fi
      
      # Upload all built installers to JFrog registry using HTTP
      UPLOADED_COUNT=0
      FAILED_UPLOADS=()
      
      for file in *.exe *.dmg *.AppImage *.deb *.rpm; do
        if [ -f "$file" ]; then
          echo "üì§ Uploading $file to $ELECTRON_REGISTRY..."
          
          # Method 1: Try with curl (most reliable)
          TARGET_PATH="artifactory/$ELECTRON_REGISTRY/v$BUILD_VERSION/$file"
          CURL_URL="${JFROG_HTTP_URL}/${TARGET_PATH}"
          
          echo "Uploading with curl to: ${CURL_URL}"
          
          if curl -f -u "$JFROG_USER:$JFROG_USER_PASSWORD" \
            -T "$file" \
            --connect-timeout 30 \
            --max-time 300 \
            "${CURL_URL}"; then
            echo "‚úÖ Successfully uploaded $file with curl"
            UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
          else
            echo "‚ùå Failed to upload $file"
            FAILED_UPLOADS+=("$file")
          fi
        fi
      done
      
      # Report results
      echo "üìä Upload Results:"
      echo "Successfully uploaded: $UPLOADED_COUNT files"
      
      if [ ${#FAILED_UPLOADS[@]} -gt 0 ]; then
        echo "Failed uploads: ${FAILED_UPLOADS[*]}"
        echo "‚ùå Some Electron installers failed to upload"
        exit 1
      else
        echo "‚úÖ All Electron installers uploaded successfully to JFrog"
      fi
  variables:
    KB_BASE_URL: ${KB_BASE_URL:-"https://onlysaid.com/api/kb"}
    MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID:-"4b24891c-a62b-4da5-9fd1-fc6e1b912297"}
    ONLYSAID_API_URL: ${ONLYSAID_API_URL:-"https://onlysaid.com/api/v2"}
    ONLYSAID_DOMAIN: ${ONLYSAID_DOMAIN:-"https://onlysaid.com"}
    SOCKET_SERVER_URL: ${SOCKET_SERVER_URL:-"https://onlysaid.com/"}
    GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-"879402396826-sfq4ukdf1luhh5o0ub0am7gnljce2ss5.apps.googleusercontent.com"}
    GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-""}
  cache:
    - key:
        files:
          - onlysaid-electron/package-lock.json
      paths:
        - onlysaid-electron/node_modules/
      policy: pull
  # NO ARTIFACTS - Upload directly to JFrog instead

# Modified: Use GitLab Container Registry for Docker images
build-and-publish:docker-images:
  stage: build
  needs: ["build:nextjs"]
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl bash jq
    - *load_secrets
    - *verify_docker_environment
  script:
    - |
      echo "üîê Authenticating with GitLab Container Registry..."
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      echo "‚úÖ Successfully authenticated with GitLab Container Registry"
    - |
      echo "üèóÔ∏è Building and pushing Docker images to GitLab Container Registry..."
      
      # Build and push Next.js Docker Image
      echo "Building Next.js Docker image..."
      docker build -t "$DOCKER_IMAGE_PREFIX/onlysaid-app:dev-$BUILD_VERSION" \
        -f ./docker/Dockerfile.next .
      docker push "$DOCKER_IMAGE_PREFIX/onlysaid-app:dev-$BUILD_VERSION"
      echo "‚úÖ Next.js image pushed successfully"
      
      # Build and push Socket Server Docker Image
      echo "Building Socket Server Docker image..."
      docker build -t "$DOCKER_IMAGE_PREFIX/onlysaid-socket:dev-$BUILD_VERSION" \
        -f ./socket_server/Dockerfile.socket_server ./socket_server/
      docker push "$DOCKER_IMAGE_PREFIX/onlysaid-socket:dev-$BUILD_VERSION"
      echo "‚úÖ Socket Server image pushed successfully"
      
      # Build and push Knowledge Base Docker Image
      echo "Building Knowledge Base Docker image..."
      docker build -t "$DOCKER_IMAGE_PREFIX/onlysaid-kb:dev-$BUILD_VERSION" \
        -f ./docker/Dockerfile.kb .
      docker push "$DOCKER_IMAGE_PREFIX/onlysaid-kb:dev-$BUILD_VERSION"
      echo "‚úÖ Knowledge Base image pushed successfully"
      
      # Build and push Documentation Docker Image
      echo "Building Documentation Docker image..."
      docker build -t "$DOCKER_IMAGE_PREFIX/onlysaid-docs:dev-$BUILD_VERSION" \
        -f ./docker/Dockerfile.docs .
      docker push "$DOCKER_IMAGE_PREFIX/onlysaid-docs:dev-$BUILD_VERSION"
      echo "‚úÖ Documentation image pushed successfully"
      
      echo "üéâ All Docker images built and pushed to GitLab Container Registry successfully"

deploy:generate-manifests:
  stage: deploy
  needs: ["build-and-publish:docker-images"]
  script:
    - *load_secrets
    - |
      echo "Generating Kubernetes deployment manifests..."
      mkdir -p k8s-manifests
      
      # Create deployment manifest template using GitLab Container Registry
      cat > k8s-manifests/onlysaid-app-deployment.yaml << EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: onlysaid-app-dev
        namespace: onlysaid-dev
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: onlysaid-app-dev
        template:
          metadata:
            labels:
              app: onlysaid-app-dev
          spec:
            containers:
            - name: onlysaid-app
              image: $DOCKER_IMAGE_PREFIX/onlysaid-app:dev-$BUILD_VERSION
              ports:
              - containerPort: 3000
      EOF
      echo "‚úÖ Kubernetes manifests generated"
  artifacts:
    name: "k8s-manifests-$BUILD_VERSION"
    paths:
      - k8s-manifests/
    expire_in: 7 days

# Summary job
build-summary:
  stage: deploy
  needs: 
    - "build-and-publish:docker-images"
    - "package-and-publish:electron" 
    - "deploy:generate-manifests"
  script:
    - *load_secrets
    - |
      echo "## Build Summary"
      echo "- **Build Version:** $BUILD_VERSION"
      echo "- **Build Number:** $BUILD_NUMBER"
      echo "- **Pipeline ID:** $CI_PIPELINE_ID"
      echo "- **Docker Registry:** GitLab Container Registry"
      echo "- **Docker Images:** $DOCKER_IMAGE_PREFIX"
      echo "- **Electron Registry:** JFrog ($ELECTRON_REGISTRY)"
      echo "- **Docker Images Built & Pushed:** ‚úÖ"
      echo "- **Electron Build & Upload Completed:** ‚úÖ"
      echo "- **Kubernetes Manifests Generated:** ‚úÖ"

# Cleanup job - always runs
cleanup:workspace:
  stage: cleanup
  when: always
  script:
    - |
      echo "üßπ Cleaning up..."
      
      # Logout from GitLab Container Registry
      docker logout "$CI_REGISTRY" || echo "Docker logout failed"
      
      # Clean up Docker images to save space
      echo "Cleaning up Docker images..."
      docker system prune -f
      
      # Clean up npm cache
      echo "Cleaning npm cache..."
      npm cache clean --force
      
      # Clean up node_modules to save space (will be reinstalled next run)
      echo "Cleaning node_modules..."
      rm -rf node_modules
      rm -rf onlysaid-electron/node_modules
      
      # Clean up build artifacts
      echo "Cleaning build artifacts..."
      rm -rf .next
      rm -rf onlysaid-electron/release
      
      echo "‚úÖ Workspace cleanup completed"

# Rules for when to run the pipeline
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "development" 