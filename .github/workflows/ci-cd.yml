name: OnlySaid CI/CD

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

env:
  # Build versioning
  BUILD_VERSION: ${{ github.sha }}
  BUILD_NUMBER: ${{ github.run_number }}
  
  # Docker registry configuration (fixed to use HTTP port 8080)
  DOCKER_REGISTRY_HOST: "1bucket.oneas1a.com:8080"
  ELECTRON_REGISTRY: oa-onlysaid-electron-dev-local

jobs:
  # Stage 1: CI - Build & Initial Publication
  ci-build-and-publish:
    name: CI - Build & Publish Artifacts
    runs-on: [self-hosted, onlysaid-runner]
    
    outputs:
      build-version: ${{ env.BUILD_VERSION }}
      docker-image-tag: ${{ steps.docker-meta.outputs.tags }}
      
    steps:
      # 1. Setup & Checkout
      - name: "[INIT] Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # 2. Load secrets and configure environment
      - name: "[CONFIG] Load secrets and configure environment"
        run: |
          echo "üîß Loading configuration from ~/.secrets..."
          
          SECRETS_FILE="$HOME/.secrets"
          if [ -f "$SECRETS_FILE" ]; then
            echo "Loading environment variables from $SECRETS_FILE..."
            source "$SECRETS_FILE"
            
            # Export to GitHub Actions environment
            echo "JFROG_URL=${JFROG_URL}" >> $GITHUB_ENV
            echo "JFROG_USER=${JFROG_USER}" >> $GITHUB_ENV
            echo "JFROG_USER_PASSWORD=${JFROG_USER_PASSWORD}" >> $GITHUB_ENV
            echo "JFROG_TOKEN=${JFROG_TOKEN}" >> $GITHUB_ENV
            echo "STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}" >> $GITHUB_ENV
            echo "KB_BASE_URL=${KB_BASE_URL}" >> $GITHUB_ENV
            echo "MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}" >> $GITHUB_ENV
            echo "ONLYSAID_API_URL=${ONLYSAID_API_URL}" >> $GITHUB_ENV
            echo "ONLYSAID_DOMAIN=${ONLYSAID_DOMAIN}" >> $GITHUB_ENV
            echo "SOCKET_SERVER_URL=${SOCKET_SERVER_URL}" >> $GITHUB_ENV
            echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> $GITHUB_ENV
            echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> $GITHUB_ENV
            
            # Configure Docker registry URLs using working format
            echo "DOCKER_REGISTRY=${DOCKER_REGISTRY_HOST}/oa-onlysaid-app-docker-dev-local" >> $GITHUB_ENV
            
            echo "‚úÖ Configuration loaded successfully"
            echo "JFrog Web URL: ${JFROG_URL}"
            echo "Docker Registry Host: ${DOCKER_REGISTRY_HOST}"
            echo "Docker Registry: ${DOCKER_REGISTRY_HOST}/oa-onlysaid-app-docker-dev-local"
            echo "JFrog User: ${JFROG_USER}"
          else
            echo "‚ùå Secrets file not found at $SECRETS_FILE"
            echo "Current user: $(whoami)"
            echo "Home directory: $HOME"
            echo "Files in home directory:"
            ls -la "$HOME" | grep -E '\.(secrets|env)' || echo "No secrets files found"
            exit 1
          fi

      # 3. Verify runner environment
      - name: "[VERIFY] Runner environment"
        run: |
          echo "üîç Verifying self-hosted runner environment..."
          echo "Runner OS: $(uname -a)"
          echo "Current user: $(whoami)"
          echo "Working directory: $(pwd)"
          echo "Available disk space:"
          df -h
          echo "Docker version:"
          docker --version
          echo "Node.js version:"
          node --version
          echo "npm version:"
          npm --version
          echo "JFrog CLI version:"
          jfrog --version
          echo "Git version:"
          git --version
          echo "‚úÖ Environment verification completed"
          
      # 4. Install Node.js if not available
      - name: "[SETUP] Node.js and JFrog CLI"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      # 5. Install JFrog CLI if not available
      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        
      - name: "[CONFIG] JFrog connectivity"
        run: |
          echo "üîó Testing JFrog connectivity..."
          
          # Test JFrog web interface connectivity (HTTPS for web API)
          WEB_URL="${JFROG_URL%/}/artifactory/api/system/ping"
          echo "Testing JFrog web interface: ${WEB_URL}"
          
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s -k --connect-timeout 10 --max-time 30 "${WEB_URL}" > /dev/null; then
              echo "‚úÖ JFrog web interface is accessible (attempt $((RETRY_COUNT + 1)))"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è JFrog web interface connectivity failed, retrying in 5 seconds... (attempt $RETRY_COUNT/$MAX_RETRIES)"
                sleep 5
              else
                echo "‚ùå Cannot reach JFrog web interface after $MAX_RETRIES attempts"
                echo "JFrog URL: ${JFROG_URL}"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ JFrog web interface connectivity verified"
        timeout-minutes: 2

      # Early Docker registry connectivity test - SHOULD SUCCEED
      - name: "[CONFIG] Early Docker registry connectivity test"
        run: |
          echo "üîó Testing Docker registry connectivity early (before builds)..."
          echo "Since publish-docker-artifacts.yml succeeds, this should also work"
          
          # Test Docker registry v2 API (HTTP on port 8080) WITH AUTHENTICATION
          DOCKER_V2_URL="http://${{ env.DOCKER_REGISTRY_HOST }}/v2/"
          echo "Testing Docker v2 API: $DOCKER_V2_URL"
          
          RETRY_COUNT=0
          MAX_RETRIES=5
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Use authentication like the working test workflow does
            if curl -f -s -k -u "${{ env.JFROG_USER }}:${{ env.JFROG_USER_PASSWORD }}" --connect-timeout 15 --max-time 45 "$DOCKER_V2_URL" > /dev/null; then
              echo "‚úÖ Docker registry is accessible with authentication (attempt $((RETRY_COUNT + 1)))"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Docker registry connectivity failed, retrying in 10 seconds... (attempt $RETRY_COUNT/$MAX_RETRIES)"
                sleep 10
              else
                echo "‚ùå Cannot reach Docker registry after $MAX_RETRIES attempts"
                echo "Docker Registry: ${{ env.DOCKER_REGISTRY_HOST }}"
                echo "This should work since publish-docker-artifacts.yml succeeds"
                exit 1
              fi
            fi
          done
          
          # Test specific repository endpoint (HTTP) with authentication
          REPO_V2_URL="http://${{ env.DOCKER_REGISTRY_HOST }}/v2/oa-onlysaid-app-docker-dev-local/tags/list"
          echo "Testing repository v2 endpoint: $REPO_V2_URL"
          
          if curl -f -s -k -u "${{ env.JFROG_USER }}:${{ env.JFROG_USER_PASSWORD }}" "$REPO_V2_URL" > /dev/null 2>&1; then
            echo "‚úÖ Repository endpoint is accessible"
          else
            echo "‚ö†Ô∏è Repository endpoint not accessible - may need Docker daemon config"
            echo "This will be retested after Docker daemon configuration"
          fi
          
          echo "‚úÖ Early Docker registry connectivity test completed successfully"
        timeout-minutes: 5
        
      # 6. Dependency Management (simplified)
      - name: "[DEPS] Next.js dependencies"
        run: |
          echo "Installing Next.js dependencies..."
          
          # Set npm configuration for better reliability
          npm config set fetch-timeout 60000
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          npm config set fetch-retries 3
          
          echo "Installing dependencies with npm ci..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Successfully installed Next.js dependencies"
        timeout-minutes: 15
        
      - name: "[DEPS] Electron dependencies"
        run: |
          cd onlysaid-electron
          
          echo "Installing Electron dependencies..."
          
          # Set npm configuration for Electron
          npm config set fetch-timeout 60000
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          npm config set fetch-retries 3
          
          echo "Using public npm registry for Electron dependencies..."
          
          # Test connectivity
          echo "Testing npm registry connectivity for Electron..."
          timeout 30s npm ping
          
          echo "Installing Electron dependencies with npm ci..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Successfully installed Electron dependencies"
        timeout-minutes: 15
          
      # 7. Quality & Security Scan
      - name: "[QA] Code quality checks"
        run: |
          echo "Running ESLint and security scan..."
          
      - name: Run ESLint (Next.js)
        run: |
          echo "Running Next.js ESLint..."
          npm run lint
          echo "‚úÖ Next.js ESLint passed"
        
      - name: Run tests (Next.js)
        run: |
          echo "Running Next.js tests..."
          # Uncomment when tests are available
          # npm test
          echo "‚úÖ Next.js tests completed (no tests configured yet)"
          
      - name: Run tests (Electron)
        run: |
          echo "Skipping Electron tests - will be run during package build"
          echo "‚úÖ Electron tests will be handled by package script"
          
      # 9. Build Artifacts
      - name: "[BUILD] Applications"
        env:
          STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}
          NODE_ENV: production
        run: |
          echo "Building Next.js and Electron..."
          npm run build
          echo "‚úÖ Next.js application built successfully"
          
      - name: Verify directory structure
        run: |
          echo "Current working directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "Verifying onlysaid-electron directory exists:"
          if [ ! -d "onlysaid-electron" ]; then
            echo "‚ùå onlysaid-electron directory not found"
            exit 1
          fi
          echo "‚úÖ onlysaid-electron directory found"
          
      - name: Build Electron Application
        working-directory: ./onlysaid-electron
        env:
          KB_BASE_URL: ${{ env.KB_BASE_URL || 'http://onlysaid-dev.com/api/kb/' }}
          MICROSOFT_CLIENT_ID: ${{ env.MICROSOFT_CLIENT_ID || '' }}
          ONLYSAID_API_URL: ${{ env.ONLYSAID_API_URL || 'https://api.onlysaeid.com' }}
          ONLYSAID_DOMAIN: ${{ env.ONLYSAID_DOMAIN || 'https://onlysaid.com' }}
          SOCKET_SERVER_URL: ${{ env.SOCKET_SERVER_URL || 'http://localhost:3001' }}
          GOOGLE_CLIENT_ID: ${{ env.GOOGLE_CLIENT_ID || '' }}
          GOOGLE_CLIENT_SECRET: ${{ env.GOOGLE_CLIENT_SECRET || '' }}
        run: |
          echo "Building Electron application..."
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Checking if package.json exists:"
          if [ -f "package.json" ]; then
            echo "‚úÖ package.json found"
            echo "Available npm scripts:"
            npm run
          else
            echo "‚ùå package.json not found"
            exit 1
          fi
          echo "Checking node_modules:"
          if [ -d "node_modules" ]; then
            echo "‚úÖ node_modules directory exists"
          else
            echo "‚ùå node_modules directory missing"
            echo "Re-running npm install..."
            npm install
          fi
          npm run package
          echo "‚úÖ Electron build completed successfully"
          
      # 10. Docker Setup and Build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Extract Docker metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/onlysaid-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=dev-latest
            
      # Build Docker Images with correct tags
      - name: "[DOCKER] Container images"
        run: |
          echo "Building Docker images..."
          
      - name: Build Next.js Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.next
          platforms: linux/amd64
          push: false
          tags: ${{ env.DOCKER_REGISTRY_HOST }}/oa-onlysaid-app-docker-dev-local/onlysaid-app:dev-${{ env.BUILD_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/onlysaid-app.tar
          
      - name: Build Socket Server Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./socket_server
          file: ./socket_server/Dockerfile.socket_server
          platforms: linux/amd64
          push: false
          tags: ${{ env.DOCKER_REGISTRY_HOST }}/oa-onlysaid-app-docker-dev-local/onlysaid-socket:dev-${{ env.BUILD_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/onlysaid-socket.tar
          
      - name: Build Knowledge Base Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.kb
          platforms: linux/amd64
          push: false
          tags: ${{ env.DOCKER_REGISTRY_HOST }}/oa-onlysaid-app-docker-dev-local/onlysaid-kb:dev-${{ env.BUILD_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/onlysaid-kb.tar
          
      - name: Build Documentation Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.docs
          platforms: linux/amd64
          push: false
          tags: ${{ env.DOCKER_REGISTRY_HOST }}/oa-onlysaid-app-docker-dev-local/onlysaid-docs:dev-${{ env.BUILD_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/onlysaid-docs.tar
          
      # 11. Publish to Artifactory (Dev Tier) - FIXED
      - name: "[PUBLISH] Upload artifacts"
        run: |
          echo "üöÄ Uploading Docker images to JFrog..."
          
          # Configure Docker for HTTP registry (port 8080)
          echo "üîß Configuring Docker for HTTP registry..."
          sudo mkdir -p /etc/docker
          
          # Backup existing daemon.json if it exists
          if [ -f /etc/docker/daemon.json ]; then
            sudo cp /etc/docker/daemon.json /etc/docker/daemon.json.backup
            echo "üìã Existing Docker daemon configuration backed up"
          fi
          
          # Create daemon.json for insecure registry (HTTP)
          sudo tee /etc/docker/daemon.json > /dev/null << EOF
          {
            "insecure-registries": ["${{ env.DOCKER_REGISTRY_HOST }}"],
            "registry-mirrors": [],
            "debug": false
          }
          EOF
          
          echo "üìã Docker daemon configuration:"
          sudo cat /etc/docker/daemon.json
          
          # Validate JSON syntax before restarting
          echo "üîç Validating Docker daemon configuration..."
          if ! sudo cat /etc/docker/daemon.json | jq . > /dev/null 2>&1; then
            echo "‚ùå Invalid JSON in daemon.json, reverting to backup"
            if [ -f /etc/docker/daemon.json.backup ]; then
              sudo mv /etc/docker/daemon.json.backup /etc/docker/daemon.json
            else
              sudo rm -f /etc/docker/daemon.json
            fi
            exit 1
          fi
          
          # Restart Docker daemon
          echo "üîÑ Restarting Docker daemon..."
          if sudo systemctl restart docker; then
            echo "‚úÖ Docker daemon restarted successfully"
          else
            echo "‚ùå Docker daemon restart failed"
            exit 1
          fi
          
          # Wait for Docker to be ready
          echo "‚è≥ Waiting for Docker to be ready..."
          sleep 15
          
          # Verify Docker is working
          echo "‚úÖ Verifying Docker status..."
          docker version
          
          # Load Docker images from tar files
          echo "üì¶ Loading Docker images..."
          docker load < /tmp/onlysaid-app.tar
          docker load < /tmp/onlysaid-socket.tar
          docker load < /tmp/onlysaid-kb.tar
          docker load < /tmp/onlysaid-docs.tar
          
          # Docker login with retry logic (this will test connectivity implicitly)
          echo "üîê Authenticating with JFrog Docker registry..."
          echo "Login command: docker login ${{ env.DOCKER_REGISTRY_HOST }} -u ${{ env.JFROG_USER }}"
          
          LOGIN_ATTEMPTS=0
          MAX_LOGIN_ATTEMPTS=3
          
          while [ $LOGIN_ATTEMPTS -lt $MAX_LOGIN_ATTEMPTS ]; do
            if echo "${{ env.JFROG_USER_PASSWORD }}" | docker login "${{ env.DOCKER_REGISTRY_HOST }}" -u "${{ env.JFROG_USER }}" --password-stdin; then
              echo "‚úÖ Successfully authenticated with JFrog Docker Registry"
              break
            else
              LOGIN_ATTEMPTS=$((LOGIN_ATTEMPTS + 1))
              if [ $LOGIN_ATTEMPTS -lt $MAX_LOGIN_ATTEMPTS ]; then
                echo "‚ö†Ô∏è Login attempt $LOGIN_ATTEMPTS failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "‚ùå Failed to authenticate after $MAX_LOGIN_ATTEMPTS attempts"
                exit 1
              fi
            fi
          done
          
          # Test repository access before pushing
          echo "üîç Testing repository access..."
          REPO_TEST_URL="http://${{ env.DOCKER_REGISTRY_HOST }}/v2/oa-onlysaid-app-docker-dev-local/tags/list"
          if curl -f -s -k -u "${{ env.JFROG_USER }}:${{ env.JFROG_USER_PASSWORD }}" "$REPO_TEST_URL" > /dev/null; then
            echo "‚úÖ Repository is accessible via Docker v2 API"
          else
            echo "‚ùå Repository not accessible - this may cause push failures"
            echo "Repository URL: $REPO_TEST_URL"
            # Continue anyway to see detailed error
          fi
          
          # Function to push with retry logic
          push_with_retry() {
            local image_tag="$1"
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts: Pushing $image_tag"
              
              if timeout 600 docker push "$image_tag" 2>&1 | tee /tmp/push_log_${attempt}.txt; then
                echo "‚úÖ Successfully pushed $image_tag on attempt $attempt"
                return 0
              else
                echo "‚ùå Push attempt $attempt failed for $image_tag"
                
                # Analyze the error
                if grep -q "blob upload unknown" /tmp/push_log_${attempt}.txt; then
                  echo "Error: 'blob upload unknown' detected"
                  echo "This usually indicates:"
                  echo "1. Repository is not properly configured as a Docker repository"
                  echo "2. User lacks push permissions"
                  echo "3. Repository path is incorrect"
                fi
                
                if grep -q "unauthorized" /tmp/push_log_${attempt}.txt; then
                  echo "Error: 'unauthorized' - Authentication or permission issue"
                fi
                
                if grep -q "timeout\|connection reset\|EOF" /tmp/push_log_${attempt}.txt; then
                  echo "Error: Network connectivity issue detected"
                fi
                
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting 30 seconds before retry..."
                  sleep 30
                fi
                
                attempt=$((attempt + 1))
              fi
            done
            
            echo "‚ùå Failed to push $image_tag after $max_attempts attempts"
            return 1
          }
          
          # Push images with error handling
          echo "üì§ Pushing Docker images..."
          IMAGES=("onlysaid-app" "onlysaid-socket" "onlysaid-kb" "onlysaid-docs")
          PUSHED_COUNT=0
          FAILED_PUSHES=()
          
          for image in "${IMAGES[@]}"; do
            IMAGE_TAG="${{ env.DOCKER_REGISTRY_HOST }}/oa-onlysaid-app-docker-dev-local/${image}:dev-${{ env.BUILD_VERSION }}"
            echo "Pushing ${IMAGE_TAG}..."
            
            if push_with_retry "${IMAGE_TAG}"; then
              echo "‚úÖ Successfully pushed ${image}"
              PUSHED_COUNT=$((PUSHED_COUNT + 1))
            else
              echo "‚ùå Failed to push ${image}"
              FAILED_PUSHES+=("$image")
            fi
          done
          
          # Report results
          echo "üìä Push Results:"
          echo "Successfully pushed: $PUSHED_COUNT/${#IMAGES[@]}"
          
          if [ ${#FAILED_PUSHES[@]} -gt 0 ]; then
            echo "Failed pushes: ${FAILED_PUSHES[*]}"
            echo "‚ùå Some images failed to push"
            exit 1
          else
            echo "‚úÖ All images pushed successfully"
          fi
        
      - name: Upload Electron Installers to JFrog Artifactory
        run: |
          echo "Uploading Electron installers to oa-onlysaid-electron-dev-local..."
          echo "Using HTTP (port 8080) method like Docker registry"
          
          cd onlysaid-electron/release/build
          
          # Use HTTP URL (port 8080) instead of HTTPS
          JFROG_HTTP_URL="http://1bucket.oneas1a.com:8080"
          echo "JFrog HTTP URL: ${JFROG_HTTP_URL}"
          echo "Target registry: ${{ env.ELECTRON_REGISTRY }}"
          echo "Build version: ${{ env.BUILD_VERSION }}"
          
          # Verify that build artifacts exist
          if [ ! "$(ls -A .)" ]; then
            echo "‚ùå No Electron build artifacts found"
            exit 1
          fi
          
          # Upload all built installers to electron registry using HTTP
          UPLOADED_COUNT=0
          FAILED_UPLOADS=()
          
          for file in *.exe *.dmg *.AppImage *.deb *.rpm; do
            if [ -f "$file" ]; then
              echo "üì§ Uploading $file to ${{ env.ELECTRON_REGISTRY }}..."
              
              # Method 1: Try with JFrog CLI using HTTP URL and insecure flag
              if jfrog rt u "$file" "${{ env.ELECTRON_REGISTRY }}/v${{ env.BUILD_VERSION }}/$file" \
                --url="${JFROG_HTTP_URL}" \
                --user="${{ env.JFROG_USER }}" \
                --password="${{ env.JFROG_USER_PASSWORD }}" \
                --insecure-tls=true \
                --build-name="OnlySaid-Electron" \
                --build-number="${{ env.BUILD_NUMBER }}"; then
                echo "‚úÖ Successfully uploaded $file with JFrog CLI"
                UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
              else
                echo "‚ö†Ô∏è JFrog CLI failed, trying with curl..."
                
                # Method 2: Fallback to curl (like working test)
                TARGET_PATH="artifactory/${{ env.ELECTRON_REGISTRY }}/v${{ env.BUILD_VERSION }}/$file"
                CURL_URL="${JFROG_HTTP_URL}/${TARGET_PATH}"
                
                echo "Uploading with curl to: ${CURL_URL}"
                
                if curl -f -u "${{ env.JFROG_USER }}:${{ env.JFROG_USER_PASSWORD }}" \
                  -T "$file" \
                  --connect-timeout 30 \
                  --max-time 300 \
                  "${CURL_URL}"; then
                  echo "‚úÖ Successfully uploaded $file with curl"
                  UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
                else
                  echo "‚ùå Failed to upload $file with both methods"
                  FAILED_UPLOADS+=("$file")
                fi
              fi
            fi
          done
          
          # Report results
          echo "üìä Upload Results:"
          echo "Successfully uploaded: $UPLOADED_COUNT files"
          
          if [ ${#FAILED_UPLOADS[@]} -gt 0 ]; then
            echo "Failed uploads: ${FAILED_UPLOADS[*]}"
            echo "‚ùå Some Electron installers failed to upload"
            exit 1
          else
            echo "‚úÖ All Electron installers uploaded successfully"
          fi
        
      # Store artifacts for potential manual download/testing
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-${{ env.BUILD_VERSION }}
          path: /tmp/*.tar
          retention-days: 7
          
      - name: Upload Electron Installers
        uses: actions/upload-artifact@v4
        with:
          name: electron-installers-${{ env.BUILD_VERSION }}
          path: onlysaid-electron/release/build/*
          retention-days: 7
          
      # 12. Deploy to Dev Environment
      - name: Generate deployment manifests
        run: |
          echo "Generating Kubernetes deployment manifests..."
          mkdir -p k8s-manifests
          
          # Create deployment manifest template using correct docker registry
          cat > k8s-manifests/onlysaid-app-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: onlysaid-app-dev
            namespace: onlysaid-dev
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: onlysaid-app-dev
            template:
              metadata:
                labels:
                  app: onlysaid-app-dev
              spec:
                containers:
                - name: onlysaid-app
                  image: ${{ env.DOCKER_REGISTRY_HOST }}/oa-onlysaid-app-docker-dev-local/onlysaid-app:dev-${{ env.BUILD_VERSION }}
                  ports:
                  - containerPort: 3000
          EOF
          echo "‚úÖ Kubernetes manifests generated"
          
      - name: Upload Kubernetes Manifests
        uses: actions/upload-artifact@v4
        with:
          name: k8s-manifests-${{ env.BUILD_VERSION }}
          path: k8s-manifests/
          retention-days: 7
          
      # Summary
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Version:** ${{ env.BUILD_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ env.BUILD_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner Type:** Self-hosted Linux" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner Host:** $(hostname)" >> $GITHUB_STEP_SUMMARY
          echo "- **JFrog Web URL:** ${{ env.JFROG_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Registry Host:** ${{ env.DOCKER_REGISTRY_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Registry:** ${{ env.DOCKER_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **JFrog Configured:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **JFrog Accessible:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Registry Accessible:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Repository:** oa-onlysaid-app-docker-dev-local" >> $GITHUB_STEP_SUMMARY
          echo "- **Electron Registry:** oa-onlysaid-electron-dev-local" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images Built:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Electron Build Completed:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts Published to JFrog:** ‚úÖ" >> $GITHUB_STEP_SUMMARY

      # 13. Cleanup workspace (important for self-hosted runners)
      - name: "[CLEANUP] Workspace cleanup"
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          
          # Restore original Docker daemon configuration
          if [ -f /etc/docker/daemon.json.backup ]; then
            echo "Restoring original Docker daemon configuration..."
            sudo mv /etc/docker/daemon.json.backup /etc/docker/daemon.json
            sudo systemctl restart docker
            sleep 10
          else
            echo "Removing Docker insecure registry configuration..."
            sudo rm -f /etc/docker/daemon.json
            sudo systemctl restart docker
            sleep 10
          fi
          
          # Clean up JFrog configuration
          if [ -n "${JFROG_SERVER_ID}" ]; then
            echo "Cleaning up JFrog configuration..."
            jfrog config remove "${JFROG_SERVER_ID}" --quiet || echo "JFrog config cleanup failed"
          fi
          
          # Logout from Docker registry
          docker logout "${{ env.DOCKER_REGISTRY_HOST }}" || echo "Docker logout failed"
          
          # Clean up Docker images to save space
          echo "Cleaning up Docker images..."
          docker system prune -f
          
          # Clean up npm cache
          echo "Cleaning npm cache..."
          npm cache clean --force
          
          # Clean up node_modules to save space (will be reinstalled next run)
          echo "Cleaning node_modules..."
          rm -rf node_modules
          rm -rf onlysaid-electron/node_modules
          
          # Clean up build artifacts
          echo "Cleaning build artifacts..."
          rm -rf .next
          rm -rf onlysaid-electron/release
          rm -rf /tmp/onlysaid-*.tar
          
          # Clean up temporary files
          echo "Cleaning temporary files..."
          rm -rf .npmrc
          
          echo "‚úÖ Workspace cleanup completed"