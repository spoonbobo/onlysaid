name: OnlySaid CI/CD

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

env:
  # Build versioning
  BUILD_VERSION: ${{ github.sha }}
  BUILD_NUMBER: ${{ github.run_number }}
  
  # JFrog configuration
  JFROG_CLI_URL: ${{ secrets.JFROG_URL }}
  JFROG_CLI_ACCESS_TOKEN: ${{ secrets.JFROG_TOKEN }}
  
  # Docker registry configuration
  DOCKER_REGISTRY: ${{ secrets.JFROG_URL }}/oa-onlysaid-app-docker-dev-local
  ELECTRON_REGISTRY: oa-onlysaid-electron-dev-local

jobs:
  # Stage 1: CI - Build & Initial Publication
  ci-build-and-publish:
    name: CI - Build & Publish Artifacts
    runs-on: [self-hosted, onlysaid-runner]
    
    outputs:
      build-version: ${{ env.BUILD_VERSION }}
      docker-image-tag: ${{ steps.docker-meta.outputs.tags }}
      
    steps:
      # 1. Setup & Checkout
      - name: "[INIT] Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # 2. Load secrets and configure environment
      - name: "[CONFIG] Load secrets and configure environment"
        run: |
          echo "üîß Loading configuration from ~/.secrets..."
          
          SECRETS_FILE="$HOME/.secrets"
          if [ -f "$SECRETS_FILE" ]; then
            echo "Loading environment variables from $SECRETS_FILE..."
            source "$SECRETS_FILE"
            
            # Export to GitHub Actions environment
            echo "JFROG_URL=${JFROG_URL}" >> $GITHUB_ENV
            echo "JFROG_TOKEN=${JFROG_TOKEN}" >> $GITHUB_ENV
            echo "STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}" >> $GITHUB_ENV
            echo "KB_BASE_URL=${KB_BASE_URL}" >> $GITHUB_ENV
            echo "MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}" >> $GITHUB_ENV
            echo "ONLYSAID_API_URL=${ONLYSAID_API_URL}" >> $GITHUB_ENV
            echo "ONLYSAID_DOMAIN=${ONLYSAID_DOMAIN}" >> $GITHUB_ENV
            echo "SOCKET_SERVER_URL=${SOCKET_SERVER_URL}" >> $GITHUB_ENV
            echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> $GITHUB_ENV
            echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> $GITHUB_ENV
            
            # Configure Docker registry from JFROG_URL
            JFROG_DOMAIN=$(echo "${JFROG_URL}" | sed 's|^https\?://||' | sed 's|/$||')
            echo "DOCKER_REGISTRY=${JFROG_DOMAIN}/oa-onlysaid-app-docker-dev-local" >> $GITHUB_ENV
            echo "ELECTRON_REGISTRY=oa-onlysaid-electron-dev-local" >> $GITHUB_ENV
            
            echo "‚úÖ Configuration loaded successfully"
            echo "JFrog URL: ${JFROG_URL}"
            echo "Docker Registry: ${JFROG_DOMAIN}/oa-onlysaid-app-docker-dev-local"
          else
            echo "‚ùå Secrets file not found at $SECRETS_FILE"
            echo "Current user: $(whoami)"
            echo "Home directory: $HOME"
            echo "Files in home directory:"
            ls -la "$HOME" | grep -E '\.(secrets|env)' || echo "No secrets files found"
            exit 1
          fi

      # 3. Verify runner environment
      - name: "[VERIFY] Runner environment"
        run: |
          echo "üîç Verifying self-hosted runner environment..."
          echo "Runner OS: $(uname -a)"
          echo "Current user: $(whoami)"
          echo "Working directory: $(pwd)"
          echo "Available disk space:"
          df -h
          echo "Docker version:"
          docker --version
          echo "Node.js version:"
          node --version
          echo "npm version:"
          npm --version
          echo "JFrog CLI version:"
          jfrog --version
          echo "Git version:"
          git --version
          echo "‚úÖ Environment verification completed"
          
      # 4. Install Node.js if not available
      - name: "[SETUP] Node.js and JFrog CLI"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      # 5. Install JFrog CLI and configure properly
      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        
      - name: "[CONFIG] Configure JFrog CLI"
        run: |
          echo "üîß Configuring JFrog CLI..."
          
          # Configure JFrog CLI with explicit server configuration
          jfrog config add artifactory \
            --url="${JFROG_URL}" \
            --access-token="${JFROG_TOKEN}" \
            --interactive=false \
            --overwrite
          
          # Test the configuration
          echo "Testing JFrog CLI configuration..."
          jfrog rt ping --server-id=artifactory
          
          # Set default server
          export JFROG_SERVER_ID=artifactory
          echo "JFROG_SERVER_ID=artifactory" >> $GITHUB_ENV
          
          echo "‚úÖ JFrog CLI configured successfully"
        timeout-minutes: 2
        
      - name: "[CONFIG] JFrog connectivity"
        run: |
          echo "üîó Testing JFrog connectivity..."
          
          # Extract domain for testing
          JFROG_DOMAIN=$(echo "${JFROG_URL}" | sed 's|^https\?://||' | sed 's|/$||')
          
          # Test JFrog connectivity with multiple endpoints
          echo "Testing JFrog server accessibility..."
          
          if timeout 30s curl -f -s --connect-timeout 10 --max-time 30 "${JFROG_URL}/artifactory/api/system/ping" > /dev/null; then
            echo "‚úÖ JFrog Artifactory API is accessible"
          elif timeout 30s curl -f -s --connect-timeout 10 --max-time 30 "${JFROG_URL}/api/system/ping" > /dev/null; then
            echo "‚úÖ JFrog API is accessible (alternative endpoint)"
          else
            echo "‚ùå Cannot reach JFrog server from self-hosted runner"
            echo "Testing basic connectivity..."
            timeout 10s curl -v "${JFROG_URL}" || echo "Basic connectivity test failed"
            echo "Please verify:"
            echo "1. Runner has internet connectivity"
            echo "2. JFrog URL is correct: ${JFROG_URL}"
            echo "3. JFrog domain: ${JFROG_DOMAIN}"
            echo "4. Network/firewall allows outbound connections"
            echo "5. JFrog service is running"
            exit 1
          fi
          
          # Test Docker registry connectivity
          echo "Testing Docker registry connectivity..."
          if timeout 30s curl -f -s --connect-timeout 10 --max-time 30 "https://${JFROG_DOMAIN}/v2/" > /dev/null; then
            echo "‚úÖ Docker registry endpoint is accessible"
            echo "JFROG_ACCESSIBLE=true" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Docker registry endpoint test failed, but will attempt login anyway"
            echo "JFROG_ACCESSIBLE=partial" >> $GITHUB_ENV
          fi
        timeout-minutes: 2
        
      # 6. Dependency Management (simplified)
      - name: "[DEPS] Next.js dependencies"
        run: |
          echo "Installing Next.js dependencies..."
          
          # Set npm configuration for better reliability
          npm config set fetch-timeout 60000
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          npm config set fetch-retries 3
          
          echo "Installing dependencies with npm ci..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Successfully installed Next.js dependencies"
        timeout-minutes: 15
        
      - name: "[DEPS] Electron dependencies"
        run: |
          cd onlysaid-electron
          
          echo "Installing Electron dependencies..."
          
          # Set npm configuration for Electron
          npm config set fetch-timeout 60000
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          npm config set fetch-retries 3
          
          # No need to copy .npmrc - using public registry by default
          echo "Using public npm registry for Electron dependencies..."
          
          # Test connectivity
          echo "Testing npm registry connectivity for Electron..."
          timeout 30s npm ping
          
          echo "Installing Electron dependencies with npm ci..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Successfully installed Electron dependencies"
        timeout-minutes: 15
          
      # 7. Quality & Security Scan
      - name: "[QA] Code quality checks"
        run: |
          echo "Running ESLint and security scan..."
          
      - name: Run ESLint (Next.js)
        run: |
          echo "Running Next.js ESLint..."
          npm run lint
          echo "‚úÖ Next.js ESLint passed"
        
      - name: Run tests (Next.js)
        run: |
          echo "Running Next.js tests..."
          # Uncomment when tests are available
          # npm test
          echo "‚úÖ Next.js tests completed (no tests configured yet)"
          
      - name: Run tests (Electron)
        run: |
          echo "Skipping Electron tests - will be run during package build"
          echo "‚úÖ Electron tests will be handled by package script"
          
      # - name: JFrog Security Scan
      #   run: |
      #     echo "Running JFrog security scan..."
      #     echo "JFrog server is accessible, running security scan..."
      #     timeout 120s jfrog audit --server-id="${JFROG_SERVER_ID:-artifactory}"
      #     echo "‚úÖ JFrog security scan completed"
      #   timeout-minutes: 3
        
      # 9. Build Artifacts
      - name: "[BUILD] Applications"
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          NODE_ENV: production
        run: |
          echo "Building Next.js and Electron..."
          npm run build
          echo "‚úÖ Next.js application built successfully"
          
      - name: Verify directory structure
        run: |
          echo "Current working directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "Verifying onlysaid-electron directory exists:"
          if [ ! -d "onlysaid-electron" ]; then
            echo "‚ùå onlysaid-electron directory not found"
            exit 1
          fi
          echo "‚úÖ onlysaid-electron directory found"
          
      - name: Build Electron Application
        working-directory: ./onlysaid-electron
        env:
          KB_BASE_URL: ${{ secrets.KB_BASE_URL || 'http://onlysaid-dev.com/api/kb/' }}
          MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID || '' }}
          ONLYSAID_API_URL: ${{ secrets.ONLYSAID_API_URL || 'https://api.onlysaeid.com' }}
          ONLYSAID_DOMAIN: ${{ secrets.ONLYSAID_DOMAIN || 'https://onlysaid.com' }}
          SOCKET_SERVER_URL: ${{ secrets.SOCKET_SERVER_URL || 'http://localhost:3001' }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || '' }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || '' }}
        run: |
          echo "Building Electron application..."
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Checking if package.json exists:"
          if [ -f "package.json" ]; then
            echo "‚úÖ package.json found"
            echo "Available npm scripts:"
            npm run
          else
            echo "‚ùå package.json not found"
            exit 1
          fi
          echo "Checking node_modules:"
          if [ -d "node_modules" ]; then
            echo "‚úÖ node_modules directory exists"
          else
            echo "‚ùå node_modules directory missing"
            echo "Re-running npm install..."
            npm install
          fi
          npm run package
          echo "‚úÖ Electron build completed successfully"
          
      # 10. Docker Setup and Build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Extract Docker metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/onlysaid-app
          tags: |
            type=raw,value=dev-${{ env.BUILD_VERSION }}
            type=raw,value=dev-latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=OnlySaid App
            org.opencontainers.image.description=OnlySaid Application
            org.opencontainers.image.version=${{ env.BUILD_VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            
      # Build Docker Images
      - name: "[DOCKER] Container images"
        run: |
          echo "Building Docker images..."
          
      - name: Build Next.js Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.next
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/onlysaid-app.tar
          
      - name: Build Socket Server Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./socket_server
          file: ./socket_server/Dockerfile.socket_server
          platforms: linux/amd64
          push: false
          tags: ${{ env.DOCKER_REGISTRY }}/onlysaid-socket:dev-${{ env.BUILD_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/onlysaid-socket.tar
          
      - name: Build Knowledge Base Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.kb
          platforms: linux/amd64
          push: false
          tags: ${{ env.DOCKER_REGISTRY }}/onlysaid-kb:dev-${{ env.BUILD_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/onlysaid-kb.tar
          
      - name: Build Documentation Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.docs
          platforms: linux/amd64
          push: false
          tags: ${{ env.DOCKER_REGISTRY }}/onlysaid-docs:dev-${{ env.BUILD_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/onlysaid-docs.tar
          
      # 11. Publish to Artifactory (Dev Tier)
      - name: "[PUBLISH] Upload artifacts"
        run: |
          echo "Uploading to JFrog..."
          
          # Clean up any existing images first to avoid conflicts
          echo "Cleaning up existing Docker images..."
          docker image prune -f
          
          # Load images
          echo "Loading Docker images from tar files..."
          docker load < /tmp/onlysaid-app.tar
          docker load < /tmp/onlysaid-socket.tar
          docker load < /tmp/onlysaid-kb.tar
          docker load < /tmp/onlysaid-docs.tar
          
          # List loaded images for verification
          echo "Loaded images:"
          docker images | grep "103.1.32.206:8080/oa-onlysaid-app-docker-dev-local"
          
          # Extract the domain from JFROG_URL for Docker registry login
          JFROG_DOMAIN=$(echo "${JFROG_URL}" | sed 's|^https\?://||' | sed 's|/$||')
          echo "Docker registry domain: ${JFROG_DOMAIN}"
          
          # Method 1: Try JFrog CLI docker login
          echo "Attempting JFrog CLI Docker login..."
          if timeout 60s jfrog rt docker-login "${JFROG_DOMAIN}" --server-id=artifactory; then
            echo "‚úÖ JFrog CLI Docker login successful"
            LOGIN_SUCCESS=true
          else
            echo "‚ö†Ô∏è JFrog CLI Docker login failed, trying manual login..."
            LOGIN_SUCCESS=false
          fi
          
          # Method 2: Manual Docker login if JFrog CLI failed
          if [ "$LOGIN_SUCCESS" = false ]; then
            echo "Attempting manual Docker login..."
            
            # Try with access token as password
            if echo "${{ secrets.JFROG_TOKEN }}" | timeout 60s docker login "${JFROG_DOMAIN}" -u admin --password-stdin; then
              echo "‚úÖ Manual Docker login successful"
              LOGIN_SUCCESS=true
            else
              echo "‚ùå Manual Docker login failed"
              
              # Try alternative username (sometimes it's the email or different format)
              echo "Trying alternative login methods..."
              if timeout 60s docker login "${JFROG_DOMAIN}" -u admin -p "${{ secrets.JFROG_TOKEN }}"; then
                echo "‚úÖ Alternative Docker login successful"
                LOGIN_SUCCESS=true
              else
                echo "‚ùå All Docker login methods failed"
                echo "Debug information:"
                echo "JFROG_URL: ${JFROG_URL}"
                echo "JFROG_DOMAIN: ${JFROG_DOMAIN}"
                echo "Token length: ${#JFROG_TOKEN}"
                
                # Try to get more information about the registry
                timeout 30s curl -v "https://${JFROG_DOMAIN}/v2/" || echo "Registry endpoint not accessible"
                exit 1
              fi
            fi
          fi
          
          if [ "$LOGIN_SUCCESS" = false ]; then
            echo "‚ùå Failed to login to Docker registry"
            exit 1
          fi
          
          echo "‚úÖ Successfully logged into Docker registry"
          
          # Push to oa-onlysaid-app-docker-dev-local repository with retries
          echo "Pushing images to oa-onlysaid-app-docker-dev-local..."
          
          # Function to push with retry
          push_with_retry() {
            local image=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts: Pushing $image"
              if timeout 300s docker push "$image"; then
                echo "‚úÖ Successfully pushed $image"
                return 0
              else
                echo "‚ùå Failed to push $image (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting 30 seconds before retry..."
                  sleep 30
                fi
                attempt=$((attempt + 1))
              fi
            done
            
            echo "‚ùå Failed to push $image after $max_attempts attempts"
            return 1
          }
          
          # Get the actual image tags that were loaded
          APP_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "onlysaid-app" | grep "dev-${{ env.BUILD_VERSION }}" | head -1)
          SOCKET_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "onlysaid-socket" | grep "dev-${{ env.BUILD_VERSION }}" | head -1)
          KB_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "onlysaid-kb" | grep "dev-${{ env.BUILD_VERSION }}" | head -1)
          DOCS_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "onlysaid-docs" | grep "dev-${{ env.BUILD_VERSION }}" | head -1)
          
          echo "Images to push:"
          echo "APP: $APP_IMAGE"
          echo "SOCKET: $SOCKET_IMAGE"
          echo "KB: $KB_IMAGE"
          echo "DOCS: $DOCS_IMAGE"
          
          # Push each image with retry logic
          if [ -n "$APP_IMAGE" ]; then
            push_with_retry "$APP_IMAGE" || exit 1
          else
            echo "‚ùå App image not found"
            exit 1
          fi
          
          if [ -n "$SOCKET_IMAGE" ]; then
            push_with_retry "$SOCKET_IMAGE" || exit 1
          else
            echo "‚ùå Socket image not found"
            exit 1
          fi
          
          if [ -n "$KB_IMAGE" ]; then
            push_with_retry "$KB_IMAGE" || exit 1
          else
            echo "‚ùå KB image not found"
            exit 1
          fi
          
          if [ -n "$DOCS_IMAGE" ]; then
            push_with_retry "$DOCS_IMAGE" || exit 1
          else
            echo "‚ùå Docs image not found"
            exit 1
          fi
          
          echo "‚úÖ All Docker images uploaded successfully"
        timeout-minutes: 25
        
      - name: Upload Electron Installers to JFrog Artifactory
        run: |
          echo "Uploading Electron installers to oa-onlysaid-electron-dev-local..."
          
          cd onlysaid-electron/release/build
          
          # Verify that build artifacts exist
          if [ ! "$(ls -A .)" ]; then
            echo "‚ùå No Electron build artifacts found"
            exit 1
          fi
          
          # List available files
          echo "Available build artifacts:"
          ls -la
          
          # Upload all built installers to electron dev repository
          UPLOADED_COUNT=0
          for file in *.exe *.dmg *.AppImage *.deb *.rpm; do
            if [ -f "$file" ]; then
              echo "Uploading $file to ${{ env.ELECTRON_REGISTRY }}..."
              if jfrog rt u "$file" "${{ env.ELECTRON_REGISTRY }}/v${{ env.BUILD_VERSION }}/$file" \
                --server-id=artifactory \
                --build-name="OnlySaid-Electron" \
                --build-number="${{ env.BUILD_NUMBER }}"; then
                echo "‚úÖ Successfully uploaded $file"
                UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
              else
                echo "‚ùå Failed to upload $file"
              fi
            fi
          done
          
          if [ $UPLOADED_COUNT -eq 0 ]; then
            echo "‚ùå No Electron installers were uploaded"
            exit 1
          fi
          
          echo "‚úÖ Successfully uploaded $UPLOADED_COUNT Electron installers"
        timeout-minutes: 10
        
      # Store artifacts for potential manual download/testing
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-${{ env.BUILD_VERSION }}
          path: /tmp/*.tar
          retention-days: 7
          
      - name: Upload Electron Installers
        uses: actions/upload-artifact@v4
        with:
          name: electron-installers-${{ env.BUILD_VERSION }}
          path: onlysaid-electron/release/build/*
          retention-days: 7
          
      # 12. Deploy to Dev Environment
      - name: Generate deployment manifests
        run: |
          echo "Generating Kubernetes deployment manifests..."
          mkdir -p k8s-manifests
          
          # Create deployment manifest template using docker registry
          cat > k8s-manifests/onlysaid-app-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: onlysaid-app-dev
            namespace: onlysaid-dev
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: onlysaid-app-dev
            template:
              metadata:
                labels:
                  app: onlysaid-app-dev
              spec:
                containers:
                - name: onlysaid-app
                  image: ${{ env.DOCKER_REGISTRY }}/onlysaid-app:dev-${{ env.BUILD_VERSION }}
                  ports:
                  - containerPort: 3000
          EOF
          echo "‚úÖ Kubernetes manifests generated"
          
      - name: Upload Kubernetes Manifests
        uses: actions/upload-artifact@v4
        with:
          name: k8s-manifests-${{ env.BUILD_VERSION }}
          path: k8s-manifests/
          retention-days: 7
          
      # Summary
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Version:** ${{ env.BUILD_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ env.BUILD_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner Type:** Self-hosted Linux" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner Host:** $(hostname)" >> $GITHUB_STEP_SUMMARY
          echo "- **JFrog Configured:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **JFrog Accessible:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Registry:** oa-onlysaid-app-docker-dev-local" >> $GITHUB_STEP_SUMMARY
          echo "- **Electron Registry:** oa-onlysaid-electron-dev-local" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Registry:** oa-npm (virtual)" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images Built:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Electron Build Completed:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts Published to JFrog:** ‚úÖ" >> $GITHUB_STEP_SUMMARY

      # 12. Cleanup workspace (important for self-hosted runners)
      - name: "[CLEANUP] Workspace cleanup"
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          
          # Clean up JFrog configuration
          if [ -n "${JFROG_SERVER_ID}" ]; then
            echo "Cleaning up JFrog configuration..."
            jfrog config remove "${JFROG_SERVER_ID}" --quiet || echo "JFrog config cleanup failed"
          fi
          
          # Logout from Docker registry
          JFROG_DOMAIN=$(echo "${JFROG_URL}" | sed 's|^https\?://||' | sed 's|/$||')
          docker logout "${JFROG_DOMAIN}" || echo "Docker logout failed"
          
          # Clean up Docker images to save space
          echo "Cleaning up Docker images..."
          docker system prune -f
          
          # Clean up npm cache
          echo "Cleaning npm cache..."
          npm cache clean --force
          
          # Clean up node_modules to save space (will be reinstalled next run)
          echo "Cleaning node_modules..."
          rm -rf node_modules
          rm -rf onlysaid-electron/node_modules
          
          # Clean up build artifacts
          echo "Cleaning build artifacts..."
          rm -rf .next
          rm -rf onlysaid-electron/release
          rm -rf /tmp/onlysaid-*.tar
          
          # Clean up temporary files
          echo "Cleaning temporary files..."
          rm -rf .npmrc
          
          echo "‚úÖ Workspace cleanup completed"