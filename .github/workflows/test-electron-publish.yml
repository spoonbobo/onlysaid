name: Test Electron Publishing to JFrog

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      build_version:
        description: 'Build version (commit SHA or custom version)'
        required: false
        default: 'test-electron'
      registry_environment:
        description: 'Target registry environment'
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev

env:
  # Build versioning
  BUILD_VERSION: ${{ inputs.build_version || 'test-electron' }}
  BUILD_NUMBER: ${{ github.run_number }}
  REGISTRY_ENV: ${{ inputs.registry_environment || 'dev' }}

jobs:
  test-electron-publish:
    name: Test Electron Publishing
    runs-on: [self-hosted, onlysaid-runner]
    timeout-minutes: 45
    
    steps:
      # 1. Setup & Environment Configuration (SAME AS CI/CD)
      - name: "[CONFIG] Load environment configuration"
        id: config
        run: |
          echo "üîß Loading configuration for ${{ env.REGISTRY_ENV }} environment..."
          
          SECRETS_FILE="$HOME/.secrets"
          if [ -f "$SECRETS_FILE" ]; then
            echo "Loading environment variables from $SECRETS_FILE..."
            source "$SECRETS_FILE"
            
            # Export to GitHub Actions environment (SAME AS CI/CD)
            echo "JFROG_URL=${JFROG_URL}" >> $GITHUB_ENV
            echo "JFROG_USER=${JFROG_USER}" >> $GITHUB_ENV
            echo "JFROG_USER_PASSWORD=${JFROG_USER_PASSWORD}" >> $GITHUB_ENV
            echo "JFROG_TOKEN=${JFROG_TOKEN}" >> $GITHUB_ENV
            
            # Configure Electron registry based on environment
            case "${{ env.REGISTRY_ENV }}" in
              "dev")
                ELECTRON_REGISTRY="oa-onlysaid-electron-dev-local"
                ;;
              "staging")
                ELECTRON_REGISTRY="oa-onlysaid-electron-staging-local"
                ;;
              "prod")
                ELECTRON_REGISTRY="oa-onlysaid-electron-prod-local"
                ;;
              *)
                echo "‚ùå Unknown registry environment: ${{ env.REGISTRY_ENV }}"
                exit 1
                ;;
            esac
            
            echo "ELECTRON_REGISTRY=${ELECTRON_REGISTRY}" >> $GITHUB_ENV
            
            echo "‚úÖ Configuration loaded successfully"
            echo "Environment: ${{ env.REGISTRY_ENV }}"
            echo "JFrog URL: ${JFROG_URL}"
            echo "Electron Registry: ${ELECTRON_REGISTRY}"
            echo "JFrog User: ${JFROG_USER}"
          else
            echo "‚ùå Secrets file not found at $SECRETS_FILE"
            exit 1
          fi

      # 2. Checkout repository
      - name: "[INIT] Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # 3. Setup Node.js and JFrog CLI (SAME AS CI/CD)
      - name: "[SETUP] Node.js and JFrog CLI"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4

      # 4. Test JFrog connectivity (SAME AS CI/CD)
      - name: "[CONFIG] JFrog connectivity"
        run: |
          echo "üîó Testing JFrog connectivity..."
          
          # Test JFrog web interface connectivity (HTTPS for web API)
          WEB_URL="${JFROG_URL%/}/artifactory/api/system/ping"
          echo "Testing JFrog web interface: ${WEB_URL}"
          
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s -k --connect-timeout 10 --max-time 30 "${WEB_URL}" > /dev/null; then
              echo "‚úÖ JFrog web interface is accessible (attempt $((RETRY_COUNT + 1)))"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è JFrog web interface connectivity failed, retrying in 5 seconds... (attempt $RETRY_COUNT/$MAX_RETRIES)"
                sleep 5
              else
                echo "‚ùå Cannot reach JFrog web interface after $MAX_RETRIES attempts"
                echo "JFrog URL: ${JFROG_URL}"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ JFrog web interface connectivity verified"
        timeout-minutes: 2

      # 5. Install dependencies and build Electron app
      - name: "[DEPS] Install Electron dependencies"
        run: |
          cd onlysaid-electron
          
          echo "Installing Electron dependencies..."
          
          # Set npm configuration for better reliability (SAME AS CI/CD)
          npm config set fetch-timeout 60000
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          npm config set fetch-retries 3
          
          echo "Installing dependencies with npm ci..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Successfully installed Electron dependencies"
        timeout-minutes: 15

      # 6. Build Electron application
      - name: "[BUILD] Build Electron application"
        working-directory: ./onlysaid-electron
        env:
          KB_BASE_URL: ${{ env.KB_BASE_URL || 'http://onlysaid-dev.com/api/kb/' }}
          MICROSOFT_CLIENT_ID: ${{ env.MICROSOFT_CLIENT_ID || '' }}
          ONLYSAID_API_URL: ${{ env.ONLYSAID_API_URL || 'https://api.onlysaeid.com' }}
          ONLYSAID_DOMAIN: ${{ env.ONLYSAID_DOMAIN || 'https://onlysaid.com' }}
          SOCKET_SERVER_URL: ${{ env.SOCKET_SERVER_URL || 'http://localhost:3001' }}
          GOOGLE_CLIENT_ID: ${{ env.GOOGLE_CLIENT_ID || '' }}
          GOOGLE_CLIENT_SECRET: ${{ env.GOOGLE_CLIENT_SECRET || '' }}
        run: |
          echo "Building Electron application..."
          echo "Current working directory: $(pwd)"
          
          echo "Available npm scripts:"
          npm run
          
          echo "Building Electron package..."
          npm run package
          echo "‚úÖ Electron build completed successfully"

      # 7. Verify build artifacts
      - name: "[VERIFY] Check build artifacts"
        run: |
          echo "üîç Checking Electron build artifacts..."
          
          cd onlysaid-electron/release/build
          
          if [ ! "$(ls -A .)" ]; then
            echo "‚ùå No Electron build artifacts found"
            exit 1
          fi
          
          echo "üìã Found build artifacts:"
          ls -la
          
          # Count different types of installers
          INSTALLER_COUNT=0
          for pattern in "*.exe" "*.dmg" "*.AppImage" "*.deb" "*.rpm"; do
            if ls $pattern 1> /dev/null 2>&1; then
              COUNT=$(ls $pattern | wc -l)
              INSTALLER_COUNT=$((INSTALLER_COUNT + COUNT))
              echo "Found $COUNT files matching $pattern"
            fi
          done
          
          if [ $INSTALLER_COUNT -eq 0 ]; then
            echo "‚ùå No installer files found"
            exit 1
          fi
          
          echo "‚úÖ Found $INSTALLER_COUNT installer files"

      # 8. Upload using same method as CI/CD workflow (NO JFrog CLI config)
      - name: "[PUBLISH] Upload Electron installers to JFrog"
        run: |
          echo "üöÄ Uploading Electron installers to JFrog..."
          echo "Using same upload method as CI/CD workflow"
          
          cd onlysaid-electron/release/build
          
          echo "Target registry: ${{ env.ELECTRON_REGISTRY }}"
          echo "Build version: ${{ env.BUILD_VERSION }}"
          
          # Verify that build artifacts exist
          if [ ! "$(ls -A .)" ]; then
            echo "‚ùå No Electron build artifacts found"
            exit 1
          fi
          
          # Upload all built installers to electron registry (SAME AS CI/CD)
          UPLOADED_COUNT=0
          FAILED_UPLOADS=()
          
          for file in *.exe *.dmg *.AppImage *.deb *.rpm; do
            if [ -f "$file" ]; then
              echo "üì§ Uploading $file to ${{ env.ELECTRON_REGISTRY }}..."
              
              # Use same upload method as CI/CD workflow
              if jfrog rt u "$file" "${{ env.ELECTRON_REGISTRY }}/v${{ env.BUILD_VERSION }}/$file" \
                --server-id="${JFROG_SERVER_ID:-artifactory}" \
                --build-name="OnlySaid-Electron-Test" \
                --build-number="${{ env.BUILD_NUMBER }}"; then
                echo "‚úÖ Successfully uploaded $file"
                UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
              else
                echo "‚ùå Failed to upload $file"
                FAILED_UPLOADS+=("$file")
              fi
            fi
          done
          
          # Report results
          echo "üìä Upload Results:"
          echo "Successfully uploaded: $UPLOADED_COUNT files"
          
          if [ ${#FAILED_UPLOADS[@]} -gt 0 ]; then
            echo "Failed uploads: ${FAILED_UPLOADS[*]}"
            echo "‚ùå Some files failed to upload"
            exit 1
          else
            echo "‚úÖ All files uploaded successfully"
          fi

      # 9. Generate summary
      - name: "[SUMMARY] Test summary"
        run: |
          echo "üìã Generating test summary..."
          
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## Electron Publishing Test Results
          
          **Environment:** ${{ env.REGISTRY_ENV }}
          **Build Version:** ${{ env.BUILD_VERSION }}
          **Registry:** ${{ env.ELECTRON_REGISTRY }}
          **Test Status:** ‚úÖ SUCCESS
          
          ### Configuration Details:
          - **JFrog Web URL:** ${{ env.JFROG_URL }}
          - **Electron Registry:** ${{ env.ELECTRON_REGISTRY }}
          - **Target Path:** \`${{ env.ELECTRON_REGISTRY }}/v${{ env.BUILD_VERSION }}/\`
          
          ### Test Information:
          - **Purpose:** Test Electron installer publishing to JFrog
          - **Upload Method:** Same as CI/CD workflow (no CLI config)
          - **Build Process:** ‚úÖ Successful
          - **Upload Process:** ‚úÖ Successful
          EOF
          
          echo "‚úÖ Summary generated successfully"

      # 10. Cleanup
      - name: "[CLEANUP] Clean up"
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          
          # Clean up JFrog configuration if any
          if [ -n "${JFROG_SERVER_ID}" ]; then
            echo "Cleaning up JFrog configuration..."
            jfrog config remove "${JFROG_SERVER_ID}" --quiet || echo "JFrog config cleanup failed"
          fi
          
          # Clean up build artifacts to save space
          rm -rf onlysaid-electron/release/build/*
          
          # Clean up node_modules to save space
          rm -rf onlysaid-electron/node_modules
          
          echo "‚úÖ Cleanup completed" 