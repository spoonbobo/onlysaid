name: Publish Artifacts

on:
  workflow_call:
    inputs:
      build-version:
        required: true
        type: string
  push:
    branches:
      - development
    # Only run on push to development, not on PRs

env:
  BUILD_VERSION: ${{ inputs.build-version || github.sha }}
  BUILD_NUMBER: ${{ github.run_number }}
  DOCKER_REGISTRY: ${{ secrets.JFROG_URL }}/oa-onlysaid-app-docker-dev-local
  ELECTRON_REGISTRY: oa-onlysaid-electron-dev-local

jobs:
  publish-artifacts:
    name: Publish to JFrog Artifactory
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/development'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        continue-on-error: true
        
      - name: Configure JFrog CLI
        run: |
          if [ -n "${{ secrets.JFROG_URL }}" ] && [ -n "${{ secrets.JFROG_TOKEN }}" ]; then
            jfrog config add artifactory --url="${{ secrets.JFROG_URL }}" --access-token="${{ secrets.JFROG_TOKEN }}" --interactive=false
            echo "JFROG_CONFIGURED=true" >> $GITHUB_ENV
          else
            echo "JFrog credentials not available, skipping JFrog steps"
            echo "JFROG_CONFIGURED=false" >> $GITHUB_ENV
          fi
        continue-on-error: true
        
      # Download artifacts from previous jobs
      - name: Download Docker Images
        uses: actions/download-artifact@v4
        with:
          name: docker-images-${{ env.BUILD_VERSION }}
          path: /tmp/
          
      - name: Download Electron Installers
        uses: actions/download-artifact@v4
        with:
          name: electron-installers-${{ env.BUILD_VERSION }}
          path: ./electron-installers/
          
      # Publish Docker Images
      - name: Upload Docker Images to JFrog Artifactory
        if: env.JFROG_CONFIGURED == 'true'
        run: |
          echo "Uploading Docker images to JFrog Artifactory..."
          
          # Load and tag images
          docker load < /tmp/onlysaid-app.tar
          docker load < /tmp/onlysaid-socket.tar
          docker load < /tmp/onlysaid-kb.tar
          docker load < /tmp/onlysaid-docs.tar
          
          # Push to your oa-onlysaid-app-docker-dev-local repository
          echo "Pushing images to oa-onlysaid-app-docker-dev-local..."
          docker push ${{ env.DOCKER_REGISTRY }}/onlysaid-app:dev-${{ env.BUILD_VERSION }}
          docker push ${{ env.DOCKER_REGISTRY }}/onlysaid-socket:dev-${{ env.BUILD_VERSION }}
          docker push ${{ env.DOCKER_REGISTRY }}/onlysaid-kb:dev-${{ env.BUILD_VERSION }}
          docker push ${{ env.DOCKER_REGISTRY }}/onlysaid-docs:dev-${{ env.BUILD_VERSION }}
        continue-on-error: true
        
      # Publish Electron Installers
      - name: Upload Electron Installers to JFrog Artifactory
        if: env.JFROG_CONFIGURED == 'true'
        run: |
          echo "Uploading Electron installers to oa-onlysaid-electron-dev-local..."
          
          cd ./electron-installers/
          
          # Upload all built installers to your electron dev repository
          for file in *.exe *.dmg *.AppImage; do
            if [ -f "$file" ]; then
              echo "Uploading $file to ${{ env.ELECTRON_REGISTRY }}..."
              jfrog rt u "$file" "${{ env.ELECTRON_REGISTRY }}/v${{ env.BUILD_VERSION }}/$file" \
                --server-id=artifactory \
                --build-name="OnlySaid-Electron" \
                --build-number="${{ env.BUILD_NUMBER }}"
            fi
          done
        continue-on-error: true 