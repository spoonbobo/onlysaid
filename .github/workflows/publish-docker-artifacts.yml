name: Publish Dummy Docker Artifacts to JFrog

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      build_version:
        description: 'Build version (commit SHA or custom version)'
        required: false
        default: 'test-dummy'
      registry_environment:
        description: 'Target registry environment'
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev

env:
  # Build versioning
  BUILD_VERSION: ${{ inputs.build_version || 'test-dummy' }}
  BUILD_NUMBER: ${{ github.run_number }}
  REGISTRY_ENV: ${{ inputs.registry_environment || 'dev' }}

jobs:
  publish-dummy-artifacts:
    name: Publish Dummy Docker Artifacts
    runs-on: [self-hosted, onlysaid-runner]
    timeout-minutes: 30
    
    steps:
      # 1. Setup & Environment Configuration
      - name: "[CONFIG] Load environment configuration"
        id: config
        run: |
          echo "üîß Loading configuration for ${{ env.REGISTRY_ENV }} environment..."
          
          SECRETS_FILE="$HOME/.secrets"
          if [ -f "$SECRETS_FILE" ]; then
            echo "Loading environment variables from $SECRETS_FILE..."
            source "$SECRETS_FILE"
            
            # Export to GitHub Actions environment
            echo "JFROG_URL=${JFROG_URL}" >> $GITHUB_ENV
            echo "JFROG_TOKEN=${JFROG_TOKEN}" >> $GITHUB_ENV
            
            # Configure registry based on environment
            ARTIFACTORY_HOST=$(echo "${JFROG_URL}" | sed 's|^https\?://||' | sed 's|/$||')
            case "${{ env.REGISTRY_ENV }}" in
              "dev")
                DOCKER_REPO="oa-onlysaid-app-docker-dev-local"
                ;;
              "staging")
                DOCKER_REPO="oa-onlysaid-app-docker-staging-local"
                ;;
              "prod")
                DOCKER_REPO="oa-onlysaid-app-docker-prod-local"
                ;;
              *)
                echo "‚ùå Unknown registry environment: ${{ env.REGISTRY_ENV }}"
                exit 1
                ;;
            esac
            
            echo "DOCKER_REPO=${DOCKER_REPO}" >> $GITHUB_ENV
            echo "ARTIFACTORY_HOST=${ARTIFACTORY_HOST}" >> $GITHUB_ENV
            
            echo "‚úÖ Configuration loaded successfully"
            echo "Environment: ${{ env.REGISTRY_ENV }}"
            echo "JFrog Web URL: ${JFROG_URL}"
            echo "Docker Repository: ${DOCKER_REPO}"
            echo "Artifactory Host: ${ARTIFACTORY_HOST}"
          else
            echo "‚ùå Secrets file not found at $SECRETS_FILE"
            exit 1
          fi

      # 2. Setup JFrog CLI
      - name: "[SETUP] JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        
      - name: "[VERIFY] Environment and connectivity"
        run: |
          echo "üîç Verifying environment..."
          echo "Runner OS: $(uname -a)"
          echo "Docker version: $(docker --version)"
          echo "JFrog CLI version: $(jfrog --version)"
          echo "Current user: $(whoami)"
          echo "Available disk space:"
          df -h /tmp
          
          echo "üîó Testing JFrog connectivity..."
          
          # Test JFrog web interface (for API calls)
          WEB_URL="${JFROG_URL%/}/artifactory/api/system/ping"
          echo "Testing JFrog web interface: ${WEB_URL}"
          
          if curl -f -s -k --connect-timeout 10 --max-time 30 "${WEB_URL}" > /dev/null; then
            echo "‚úÖ JFrog web interface is accessible"
          else
            echo "‚ùå Cannot reach JFrog web interface"
            echo "JFrog URL: ${JFROG_URL}"
            exit 1
          fi
          
          # Test JFrog CLI connectivity
          echo "Testing JFrog CLI connectivity..."
          if jfrog rt ping; then
            echo "‚úÖ JFrog CLI can connect to Artifactory"
          else
            echo "‚ùå JFrog CLI cannot connect to Artifactory"
            exit 1
          fi

      # 3. Create dummy Docker images
      - name: "[CREATE] Dummy Docker images"
        run: |
          echo "üèóÔ∏è Creating dummy Docker images for testing..."
          
          # Create simple dummy images
          IMAGES=("onlysaid-app" "onlysaid-socket" "onlysaid-kb" "onlysaid-docs")
          
          for image in "${IMAGES[@]}"; do
            echo "Creating dummy $image image..."
            
            # Create a simple Dockerfile for dummy image
            cat > /tmp/Dockerfile.${image} << EOF
          FROM alpine:latest
          LABEL version="${{ env.BUILD_VERSION }}"
          LABEL environment="${{ env.REGISTRY_ENV }}"
          LABEL image-name="${image}"
          LABEL created-by="github-actions"
          LABEL created-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          RUN echo "Dummy ${image} image for testing JFrog publishing" > /app.txt
          RUN echo "Version: ${{ env.BUILD_VERSION }}" >> /app.txt
          RUN echo "Environment: ${{ env.REGISTRY_ENV }}" >> /app.txt
          CMD ["cat", "/app.txt"]
          EOF
            
            # Build dummy image with local tag
            docker build -f /tmp/Dockerfile.${image} -t "${image}:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}" .
            docker tag "${image}:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}" "${image}:${{ env.REGISTRY_ENV }}-latest"
            
            echo "‚úÖ Created dummy $image image"
          done
          
          echo "üìã Created dummy images:"
          docker images | grep -E "(onlysaid-app|onlysaid-socket|onlysaid-kb|onlysaid-docs)"

      # 4. Export Docker images as tar files
      - name: "[EXPORT] Export Docker images as tar files"
        run: |
          echo "üì¶ Exporting Docker images as tar files..."
          
          IMAGES=("onlysaid-app" "onlysaid-socket" "onlysaid-kb" "onlysaid-docs")
          
          mkdir -p /tmp/docker-exports
          
          for image in "${IMAGES[@]}"; do
            echo "Exporting $image..."
            
            # Export both version and latest tags
            docker save \
              "${image}:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}" \
              "${image}:${{ env.REGISTRY_ENV }}-latest" \
              -o "/tmp/docker-exports/${image}-${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}.tar"
            
            echo "‚úÖ Exported ${image} ($(du -h /tmp/docker-exports/${image}-${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}.tar | cut -f1))"
          done
          
          echo "üìã Exported files:"
          ls -lh /tmp/docker-exports/

      # 5. Upload Docker images using JFrog CLI
      - name: "[PUBLISH] Upload Docker images via JFrog CLI"
        run: |
          echo "üöÄ Uploading Docker images to JFrog Artifactory using JFrog CLI..."
          echo "Target repository: ${{ env.DOCKER_REPO }}"
          
          IMAGES=("onlysaid-app" "onlysaid-socket" "onlysaid-kb" "onlysaid-docs")
          UPLOADED_COUNT=0
          FAILED_UPLOADS=()
          
          for image in "${IMAGES[@]}"; do
            TAR_FILE="/tmp/docker-exports/${image}-${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}.tar"
            TARGET_PATH="${{ env.DOCKER_REPO }}/${image}/${{ env.REGISTRY_ENV }}/${image}-${{ env.BUILD_VERSION }}.tar"
            
            echo "üì§ Uploading $image..."
            echo "Source: $TAR_FILE"
            echo "Target: $TARGET_PATH"
            
            if jfrog rt u "$TAR_FILE" "$TARGET_PATH" \
              --build-name="OnlySaid-Docker-Test" \
              --build-number="${{ env.BUILD_NUMBER }}" \
              --detailed-summary; then
              echo "‚úÖ Successfully uploaded $image"
              UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
            else
              echo "‚ùå Failed to upload $image"
              FAILED_UPLOADS+=("$image")
            fi
            echo "---"
          done
          
          # Report results
          echo "üìä Upload Results:"
          echo "Successfully uploaded: $UPLOADED_COUNT/${#IMAGES[@]}"
          echo "Uploaded images: $(echo "${IMAGES[@]}" | tr ' ' '\n' | grep -v "$(printf '%s\n' "${FAILED_UPLOADS[@]}")" | tr '\n' ' ' || echo "All images uploaded")"
          
          if [ ${#FAILED_UPLOADS[@]} -gt 0 ]; then
            echo "Failed uploads: ${FAILED_UPLOADS[*]}"
            echo "‚ùå Some images failed to upload"
            exit 1
          else
            echo "‚úÖ All $UPLOADED_COUNT images uploaded successfully"
          fi

      # 6. Verify uploaded artifacts
      - name: "[VERIFY] Verify uploaded artifacts"
        run: |
          echo "üîç Verifying uploaded artifacts in JFrog..."
          
          IMAGES=("onlysaid-app" "onlysaid-socket" "onlysaid-kb" "onlysaid-docs")
          VERIFIED_COUNT=0
          
          for image in "${IMAGES[@]}"; do
            TARGET_PATH="${{ env.DOCKER_REPO }}/${image}/${{ env.REGISTRY_ENV }}/${image}-${{ env.BUILD_VERSION }}.tar"
            echo "Checking $TARGET_PATH..."
            
            # Use JFrog CLI to check if file exists
            if jfrog rt s "$TARGET_PATH" --count | grep -q "1"; then
              echo "‚úÖ $image verified successfully"
              VERIFIED_COUNT=$((VERIFIED_COUNT + 1))
            else
              echo "‚ùå $image verification failed"
            fi
          done
          
          echo "üìä Verification Results: $VERIFIED_COUNT/${#IMAGES[@]} images verified"
          
          # List all files in the repository
          echo "üìã Files in repository:"
          jfrog rt s "${{ env.DOCKER_REPO }}/*" --include-dirs=false

      # 7. Test Docker image download (optional)
      - name: "[TEST] Test Docker image download"
        run: |
          echo "üîΩ Testing Docker image download..."
          
          # Try to download one image and load it
          TEST_IMAGE="onlysaid-app"
          TARGET_PATH="${{ env.DOCKER_REPO }}/${TEST_IMAGE}/${{ env.REGISTRY_ENV }}/${TEST_IMAGE}-${{ env.BUILD_VERSION }}.tar"
          DOWNLOAD_PATH="/tmp/downloaded-${TEST_IMAGE}.tar"
          
          echo "Downloading $TARGET_PATH to $DOWNLOAD_PATH..."
          
          if jfrog rt dl "$TARGET_PATH" "$DOWNLOAD_PATH"; then
            echo "‚úÖ Successfully downloaded $TEST_IMAGE"
            
            # Try to load the image
            echo "Loading Docker image..."
            if docker load -i "$DOWNLOAD_PATH"; then
              echo "‚úÖ Successfully loaded Docker image"
              
              # Show loaded images
              echo "üìã Loaded images:"
              docker images | grep "$TEST_IMAGE"
            else
              echo "‚ùå Failed to load Docker image"
            fi
          else
            echo "‚ùå Failed to download $TEST_IMAGE"
          fi

      # 8. Generate summary
      - name: "[SUMMARY] Publication summary"
        run: |
          echo "üìã Generating publication summary..."
          
          # Create detailed summary
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## Docker Artifacts Upload Test Results
          
          **Environment:** ${{ env.REGISTRY_ENV }}
          **Build Version:** ${{ env.BUILD_VERSION }}
          **Repository:** ${{ env.DOCKER_REPO }}
          **Test Status:** ‚úÖ SUCCESS
          
          ### Uploaded Docker Images:
          
          | Image | File Name | Repository Path |
          |-------|-----------|-----------------|
          | onlysaid-app | onlysaid-app-${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}.tar | ${{ env.DOCKER_REPO }}/onlysaid-app/${{ env.REGISTRY_ENV }}/ |
          | onlysaid-socket | onlysaid-socket-${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}.tar | ${{ env.DOCKER_REPO }}/onlysaid-socket/${{ env.REGISTRY_ENV }}/ |
          | onlysaid-kb | onlysaid-kb-${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}.tar | ${{ env.DOCKER_REPO }}/onlysaid-kb/${{ env.REGISTRY_ENV }}/ |
          | onlysaid-docs | onlysaid-docs-${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}.tar | ${{ env.DOCKER_REPO }}/onlysaid-docs/${{ env.REGISTRY_ENV }}/ |
          
          ### Configuration Details:
          - **JFrog URL:** ${{ env.JFROG_URL }}
          - **Docker Repository:** ${{ env.DOCKER_REPO }}
          - **Artifactory Host:** ${{ env.ARTIFACTORY_HOST }}
          - **Upload Method:** JFrog CLI (rt upload)
          
          ### Test Information:
          - **Purpose:** Test JFrog Docker artifact publishing using JFrog CLI
          - **Method:** Export Docker images as tar files and upload via JFrog CLI
          - **Images:** Dummy Alpine Linux containers with metadata
          - **JFrog CLI Connectivity:** ‚úÖ Successful
          - **Upload:** ‚úÖ Successful
          - **Verification:** ‚úÖ Successful
          EOF
          
          echo "‚úÖ Summary generated successfully"

      # 9. Cleanup
      - name: "[CLEANUP] Clean up test artifacts"
        if: always()
        run: |
          echo "üßπ Cleaning up test artifacts..."
          
          # Remove local Docker images
          echo "Removing local Docker images..."
          docker images | grep -E "(onlysaid-app|onlysaid-socket|onlysaid-kb|onlysaid-docs)" | awk '{print $3}' | xargs -r docker rmi -f || echo "Some images couldn't be removed"
          
          # Clean up exported tar files
          echo "Cleaning up exported tar files..."
          rm -rf /tmp/docker-exports
          rm -f /tmp/downloaded-*.tar
          
          # Clean up temporary Dockerfiles
          rm -f /tmp/Dockerfile.* || echo "No temporary Dockerfiles to clean"
          
          echo "‚úÖ Cleanup completed" 