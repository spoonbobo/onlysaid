name: Publish Dummy Docker Artifacts to JFrog

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      build_version:
        description: 'Build version (commit SHA or custom version)'
        required: false
        default: 'test-dummy'
      registry_environment:
        description: 'Target registry environment'
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev

env:
  # Build versioning
  BUILD_VERSION: ${{ inputs.build_version || 'test-dummy' }}
  BUILD_NUMBER: ${{ github.run_number }}
  REGISTRY_ENV: ${{ inputs.registry_environment || 'dev' }}

jobs:
  publish-dummy-artifacts:
    name: Publish Dummy Docker Artifacts
    runs-on: [self-hosted, onlysaid-runner]
    timeout-minutes: 30
    
    steps:
      # 1. Setup & Environment Configuration
      - name: "[CONFIG] Load environment configuration"
        id: config
        run: |
          echo "üîß Loading configuration for ${{ env.REGISTRY_ENV }} environment..."
          
          SECRETS_FILE="$HOME/.secrets"
          if [ -f "$SECRETS_FILE" ]; then
            echo "Loading environment variables from $SECRETS_FILE..."
            source "$SECRETS_FILE"
            
            # Export to GitHub Actions environment
            echo "JFROG_URL=${JFROG_URL}" >> $GITHUB_ENV
            echo "JFROG_TOKEN=${JFROG_TOKEN}" >> $GITHUB_ENV
            
            # Configure registry based on environment
            JFROG_DOMAIN=$(echo "${JFROG_URL}" | sed 's|^https\?://||' | sed 's|/$||')
            case "${{ env.REGISTRY_ENV }}" in
              "dev")
                DOCKER_REGISTRY="${JFROG_DOMAIN}/oa-onlysaid-app-docker-dev-local"
                ;;
              "staging")
                DOCKER_REGISTRY="${JFROG_DOMAIN}/oa-onlysaid-app-docker-staging-local"
                ;;
              "prod")
                DOCKER_REGISTRY="${JFROG_DOMAIN}/oa-onlysaid-app-docker-prod-local"
                ;;
              *)
                echo "‚ùå Unknown registry environment: ${{ env.REGISTRY_ENV }}"
                exit 1
                ;;
            esac
            
            echo "DOCKER_REGISTRY=${DOCKER_REGISTRY}" >> $GITHUB_ENV
            
            echo "‚úÖ Configuration loaded successfully"
            echo "Environment: ${{ env.REGISTRY_ENV }}"
            echo "JFrog URL: ${JFROG_URL}"
            echo "Docker Registry: ${DOCKER_REGISTRY}"
          else
            echo "‚ùå Secrets file not found at $SECRETS_FILE"
            exit 1
          fi

      - name: "[VERIFY] Environment and connectivity"
        run: |
          echo "üîç Verifying environment..."
          echo "Runner OS: $(uname -a)"
          echo "Docker version: $(docker --version)"
          echo "Current user: $(whoami)"
          echo "Available disk space:"
          df -h /tmp
          
          echo "üîó Testing JFrog connectivity..."
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Testing connectivity to: ${JFROG_URL}/artifactory/api/system/ping"
            if curl -f -s --connect-timeout 10 --max-time 30 "${JFROG_URL}/artifactory/api/system/ping" > /dev/null; then
              echo "‚úÖ JFrog server is accessible (attempt $((RETRY_COUNT + 1)))"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è JFrog connectivity failed, retrying in 5 seconds... (attempt $RETRY_COUNT/$MAX_RETRIES)"
                sleep 5
              else
                echo "‚ùå Cannot reach JFrog server after $MAX_RETRIES attempts"
                echo "JFrog URL: ${JFROG_URL}"
                echo "Please check network connectivity and JFrog server status"
                exit 1
              fi
            fi
          done

      # 2. Create dummy Docker images
      - name: "[CREATE] Dummy Docker images"
        run: |
          echo "üèóÔ∏è Creating dummy Docker images for testing..."
          
          # Create simple dummy images
          IMAGES=("onlysaid-app" "onlysaid-socket" "onlysaid-kb" "onlysaid-docs")
          
          for image in "${IMAGES[@]}"; do
            echo "Creating dummy $image image..."
            
            # Create a simple Dockerfile for dummy image
            cat > /tmp/Dockerfile.${image} << EOF
          FROM alpine:latest
          LABEL version="${{ env.BUILD_VERSION }}"
          LABEL environment="${{ env.REGISTRY_ENV }}"
          LABEL image-name="${image}"
          LABEL created-by="github-actions"
          LABEL created-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          RUN echo "Dummy ${image} image for testing JFrog publishing" > /app.txt
          RUN echo "Version: ${{ env.BUILD_VERSION }}" >> /app.txt
          RUN echo "Environment: ${{ env.REGISTRY_ENV }}" >> /app.txt
          CMD ["cat", "/app.txt"]
          EOF
            
            # Build dummy image
            docker build -f /tmp/Dockerfile.${image} -t "${{ env.DOCKER_REGISTRY }}/${image}:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}" .
            docker tag "${{ env.DOCKER_REGISTRY }}/${image}:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}" "${{ env.DOCKER_REGISTRY }}/${image}:${{ env.REGISTRY_ENV }}-latest"
            
            echo "‚úÖ Created dummy $image image"
          done
          
          echo "üìã Created dummy images:"
          docker images | grep "${{ env.DOCKER_REGISTRY }}"

      # 3. JFrog Docker Registry Authentication with retry
      - name: "[AUTH] JFrog Docker Registry"
        run: |
          echo "üîê Authenticating with JFrog Docker Registry..."
          echo "Registry URL: ${{ env.JFROG_URL }}"
          
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Authentication attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
            
            if echo "${{ secrets.JFROG_TOKEN }}" | docker login "${{ env.JFROG_URL }}" -u admin --password-stdin; then
              echo "‚úÖ Successfully authenticated with JFrog Docker Registry"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Authentication failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "‚ùå Failed to authenticate with JFrog Docker Registry after $MAX_RETRIES attempts"
                echo "Please check:"
                echo "1. JFROG_TOKEN secret is correct"
                echo "2. JFrog server is accessible"
                echo "3. User 'admin' has proper permissions"
                exit 1
              fi
            fi
          done

      # 4. Push dummy Docker images with comprehensive retry logic
      - name: "[PUBLISH] Push dummy Docker images to JFrog"
        id: push-images
        run: |
          echo "üöÄ Publishing dummy Docker images to JFrog Artifactory..."
          echo "Target registry: ${{ env.DOCKER_REGISTRY }}"
          
          # Define images to push
          IMAGES=("onlysaid-app" "onlysaid-socket" "onlysaid-kb" "onlysaid-docs")
          
          PUSHED_IMAGES=()
          FAILED_IMAGES=()
          
          # Function to push with retry
          push_with_retry() {
            local image_name=$1
            local tag_version=$2
            local tag_latest=$3
            local max_retries=3
            local retry_count=0
            
            echo "üì§ Pushing $image_name..."
            echo "Version tag: $tag_version"
            echo "Latest tag: $tag_latest"
            
            # Push version tag
            while [ $retry_count -lt $max_retries ]; do
              echo "Pushing $tag_version (attempt $((retry_count + 1))/$max_retries)..."
              
              if timeout 300 docker push "$tag_version"; then
                echo "‚úÖ Successfully pushed $tag_version"
                break
              else
                retry_count=$((retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                  echo "‚ö†Ô∏è Push failed, retrying in 15 seconds..."
                  sleep 15
                  
                  # Try to re-authenticate before retry
                  echo "Re-authenticating before retry..."
                  echo "${{ secrets.JFROG_TOKEN }}" | docker login "${{ env.JFROG_URL }}" -u admin --password-stdin
                else
                  echo "‚ùå Failed to push $tag_version after $max_retries attempts"
                  return 1
                fi
              fi
            done
            
            # Push latest tag
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              echo "Pushing $tag_latest (attempt $((retry_count + 1))/$max_retries)..."
              
              if timeout 300 docker push "$tag_latest"; then
                echo "‚úÖ Successfully pushed $tag_latest"
                return 0
              else
                retry_count=$((retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                  echo "‚ö†Ô∏è Push failed, retrying in 15 seconds..."
                  sleep 15
                  
                  # Try to re-authenticate before retry
                  echo "Re-authenticating before retry..."
                  echo "${{ secrets.JFROG_TOKEN }}" | docker login "${{ env.JFROG_URL }}" -u admin --password-stdin
                else
                  echo "‚ùå Failed to push $tag_latest after $max_retries attempts"
                  return 1
                fi
              fi
            done
          }
          
          # Push each image
          for image in "${IMAGES[@]}"; do
            VERSION_TAG="${{ env.DOCKER_REGISTRY }}/${image}:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}"
            LATEST_TAG="${{ env.DOCKER_REGISTRY }}/${image}:${{ env.REGISTRY_ENV }}-latest"
            
            echo "üîÑ Processing $image..."
            if push_with_retry "$image" "$VERSION_TAG" "$LATEST_TAG"; then
              PUSHED_IMAGES+=("$image")
              echo "‚úÖ $image pushed successfully"
            else
              FAILED_IMAGES+=("$image")
              echo "‚ùå $image push failed"
            fi
            echo "---"
          done
          
          # Report results
          echo "üìä Push Results:"
          echo "Successfully pushed (${#PUSHED_IMAGES[@]}): ${PUSHED_IMAGES[*]}"
          
          if [ ${#FAILED_IMAGES[@]} -gt 0 ]; then
            echo "Failed to push (${#FAILED_IMAGES[@]}): ${FAILED_IMAGES[*]}"
            echo "‚ùå Some images failed to push"
            exit 1
          else
            echo "‚úÖ All ${#PUSHED_IMAGES[@]} images pushed successfully"
          fi

      # 5. Verify published images
      - name: "[VERIFY] Published images"
        run: |
          echo "üîç Verifying published images in JFrog..."
          
          IMAGES=("onlysaid-app" "onlysaid-socket" "onlysaid-kb" "onlysaid-docs")
          VERIFIED_COUNT=0
          
          for image in "${IMAGES[@]}"; do
            IMAGE_URL="${{ env.DOCKER_REGISTRY }}/${image}:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}"
            echo "Checking $IMAGE_URL..."
            
            # Use docker manifest inspect to verify the image exists
            if docker manifest inspect "$IMAGE_URL" > /dev/null 2>&1; then
              echo "‚úÖ $image verified successfully"
              VERIFIED_COUNT=$((VERIFIED_COUNT + 1))
            else
              echo "‚ùå $image verification failed"
            fi
          done
          
          echo "üìä Verification Results: $VERIFIED_COUNT/${#IMAGES[@]} images verified"

      # 6. Generate summary
      - name: "[SUMMARY] Publication summary"
        run: |
          echo "üìã Generating publication summary..."
          
          # Create detailed summary
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## Dummy Docker Publication Test Results
          
          **Environment:** ${{ env.REGISTRY_ENV }}
          **Build Version:** ${{ env.BUILD_VERSION }}
          **Registry:** ${{ env.DOCKER_REGISTRY }}
          **Test Status:** ‚úÖ SUCCESS
          
          ### Published Dummy Images:
          
          | Image | Version Tag | Latest Tag | Size |
          |-------|-------------|------------|------|
          | onlysaid-app | ${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }} | ${{ env.REGISTRY_ENV }}-latest | ~5MB |
          | onlysaid-socket | ${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }} | ${{ env.REGISTRY_ENV }}-latest | ~5MB |
          | onlysaid-kb | ${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }} | ${{ env.REGISTRY_ENV }}-latest | ~5MB |
          | onlysaid-docs | ${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }} | ${{ env.REGISTRY_ENV }}-latest | ~5MB |
          
          ### Registry URLs:
          - App: \`${{ env.DOCKER_REGISTRY }}/onlysaid-app:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}\`
          - Socket: \`${{ env.DOCKER_REGISTRY }}/onlysaid-socket:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}\`
          - KB: \`${{ env.DOCKER_REGISTRY }}/onlysaid-kb:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}\`
          - Docs: \`${{ env.DOCKER_REGISTRY }}/onlysaid-docs:${{ env.REGISTRY_ENV }}-${{ env.BUILD_VERSION }}\`
          
          ### Test Information:
          - **Purpose:** Test JFrog Docker registry publishing functionality
          - **Images:** Dummy Alpine Linux containers with metadata
          - **Authentication:** ‚úÖ Successful
          - **Network Connectivity:** ‚úÖ Successful
          - **Publishing:** ‚úÖ Successful
          EOF
          
          echo "‚úÖ Summary generated successfully"

      # 7. Cleanup
      - name: "[CLEANUP] Clean up dummy images"
        if: always()
        run: |
          echo "üßπ Cleaning up dummy Docker images..."
          
          # Logout from Docker registry
          docker logout "${{ env.JFROG_URL }}" || echo "Docker logout failed"
          
          # Remove dummy images
          echo "Removing dummy images..."
          docker images | grep "${{ env.DOCKER_REGISTRY }}" | awk '{print $3}' | xargs -r docker rmi -f || echo "Some images couldn't be removed"
          
          # Clean up temporary Dockerfiles
          rm -f /tmp/Dockerfile.* || echo "No temporary Dockerfiles to clean"
          
          echo "‚úÖ Cleanup completed" 